<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mysql数据备份与恢复</title>
    <link href="/2020/04/14/mysqlBackUp/"/>
    <url>/2020/04/14/mysqlBackUp/</url>
    
    <content type="html"><![CDATA[<h1 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h1><blockquote><p>编辑数据库配置问件 my.cnf，默认位置 /etc/my， 或者使用  whereis my.cnf 进行查找</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment"># binlog 设置</span><br><span class="hljs-attr">binlog_format</span> = MIXED  <span class="hljs-comment"># binlog 记录方式，详情百度</span><br><span class="hljs-attr">log_bin</span> = /home/mysql/bin_log/mysql-bin.log  <span class="hljs-comment"># 日志存放位置</span><br><span class="hljs-attr">expire_logs_days</span> = <span class="hljs-number">7</span> <span class="hljs-comment">#binlog过期清理时间</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">123456</span><br><span class="hljs-attr">max_binlog_size</span>=<span class="hljs-number">1000</span>m <span class="hljs-comment"># 每个binlog文件大小</span><br></code></pre></td></tr></table></figure><h1 id="全量备份"><a href="#全量备份" class="headerlink" title="全量备份"></a>全量备份</h1><ul><li>编写全量备份脚本<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">采用mysqldump命令进行全量备份<br>参数说明；<br><span class="hljs-deletion">-u : 账号</span><br><span class="hljs-deletion">-p：密码</span><br><span class="hljs-deletion">-F:  刷新binlog日志，即新开一个binlog日志文件，方便后面进行数据恢复的时候拿到binlog日志文件</span><br><span class="hljs-deletion">--master-data: 记录mysqldump执行时的 binlog日志位置</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#/bin/sh</span><br>stamp=<span class="hljs-string">&quot;`date +%Y%m%d%H%M%s`&quot;</span><br>mysqldump -uroot -p abc  -F  --master-data  wbwf &gt; <span class="hljs-regexp">/home/my</span>sql<span class="hljs-regexp">/mysql_dump/</span>wbwf_<span class="hljs-variable">$&#123;stamp&#125;</span>.sql<br>oldFileDate=$(date -d<span class="hljs-string">&quot;7 day ago&quot;</span> +%Y%m%d)<br>fileName=<span class="hljs-regexp">/home/my</span>sql<span class="hljs-regexp">/mysql_dump/</span>wbwf_<span class="hljs-variable">$&#123;oldFileDate&#125;</span>*<br>rm -rf <span class="hljs-variable">$&#123;fileName&#125;</span><br></code></pre></td></tr></table></figure></li><li>添加脚本到linux定时任务<blockquote><p> 这里设置的是12个小时执行一次，具体可百度 linux crontab<br> 1.编辑定时任务：crontab -e<br> 2.保存<br> 3.查看定时任务：crontab -l </p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">SHELL=<span class="hljs-regexp">/bin/</span>bash<br>PATH=<span class="hljs-regexp">/sbin:/</span>bin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/usr/</span>bin<br>MAILTO=root<br><br><span class="hljs-comment"># For details see man 4 crontabs</span><br><br><span class="hljs-comment"># Example of job definition:</span><br><span class="hljs-comment"># .---------------- minute (0 - 59)</span><br><span class="hljs-comment"># |  .------------- hour (0 - 23)</span><br><span class="hljs-comment"># |  |  .---------- day of month (1 - 31)</span><br><span class="hljs-comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-comment"># |  |  |  |  |</span><br><span class="hljs-comment"># *  *  *  *  * user-name  command to be exec</span><br><span class="hljs-number">0</span> *<span class="hljs-regexp">/12 * * * sh /</span>home<span class="hljs-regexp">/mysql/my</span>sqldump.sh<br></code></pre></td></tr></table></figure><h1 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h1></li><li>选择需要恢复的全量文件，即我们定时dump下来的文件<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">例如：采用 wbwf_2020041409561586829377.sql 该文件<br>1.查看该文件记录的binlog日志位置<br>执行： cat wbwf_2020041409561586829377.sql | grep <span class="hljs-string">&#x27;CHANGE MASTER&#x27;</span><br>执行结果：CHANGE MASTER <span class="hljs-keyword">TO</span> <span class="hljs-attribute">MASTER_LOG_FILE</span>=<span class="hljs-string">&#x27;mysql-bin.000028&#x27;</span>, <span class="hljs-attribute">MASTER_LOG_POS</span>=154;<br>2.使用 mysqlbinlog 命令解析binlog文件成sql语句<br>执行：mysqlbinlog <span class="hljs-attribute">--database</span>=wbwf <span class="hljs-attribute">--start-position</span>=154 mysql-bin.000028 &gt; 28.sql<br>参数说明：<br>--database：指定需要导出的数据库<br>--start-position：指定开始位置，即第一步中获取到的 MASTER_LOG_POS<br>该binlog文件后面的文件也解析出来<br>mysqlbinlog <span class="hljs-attribute">--database</span>=wbwf  mysql-bin.0000xx &gt; xx.sql<br>整理导出的binlog sql文件，移除掉误操作的 sql语句<br></code></pre></td></tr></table></figure></li><li>对上面整理好的文件进行导入<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">对于<span class="hljs-keyword">dump</span>下来的全量sql文件使用 <span class="hljs-keyword">source</span> 命令进行导入，(大文件sql下使用<span class="hljs-keyword">source</span>命令效率比navicat高出不少）<br>在服务器登录mysql:  mysql -u root -p<br>选择数据库：use wbwf;<br>进行导入：<span class="hljs-keyword">source</span> wbwf_2020041409561586829377.sql;<br><br>对于整理出来的binlog sql文件采用<span class="hljs-keyword">source</span>命令或者 navicat 进行导入既可<br></code></pre></td></tr></table></figure><h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过mybatis拦截器修改sql内容，实现不同的内容存入相同的字段中</title>
    <link href="/2019/12/19/mybatisIntercepter/"/>
    <url>/2019/12/19/mybatisIntercepter/</url>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><blockquote><p>系统需要记录日志然后保存到数据库，保存的字段需要从请求信息中提取字段字段，不同的请求需要提取的字段不一样</p></blockquote><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote><p>请求a  的请求信息 {“aaa”:”aaa”,”bbbb”:”bbbb”}，需要提取的字段为 aaa，代码实体中属性名也为aaa，<br>存入扩展字段一中，扩展字段的名为 PARAM1，则代码中需要将aaa与PARAM1对应起来<br>正常逻辑可以这么做：</p><blockquote><p>1.插入数据的时候可以 insert into log(PARAM1) values (#{aaa})<br>2.查询的时候 select * from log where PARAM1 like “%XXX%” ,然后编写 resultMap 进行字段映射<br>这样的弊端：当有多个字段时，对应起来会让人奔溃，多个扩展字段与抽取字段对应操作繁琐，很容易出错</p></blockquote></blockquote><blockquote><p>解决办法：</p><blockquote><p>1.在属性 aaa 上加入自定义注解 ，注解中标明扩展字段名为 PARAM1<br>2.mybatis拦截器中对sql语句中aaa内容替换成注解上注明的PARAM1<br>效果：<br>1.插入数据的时候可以 insert into log(aaa) values (#{aaa})<br>2.查询的时候 select * from log where aaa like “%XXX%” , 然后编写 resultMap 进行字段映射<br>需要注意的是：查询时sql语句不需要写扩展字段名，但是 要写 resultMap 进行字段映射</p></blockquote></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ExtendColumnName &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> </span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据库定义"><a href="#数据库定义" class="headerlink" title="数据库定义"></a>数据库定义</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">&quot;RJGF_KMS&quot;</span>.<span class="hljs-string">&quot;KMS_REQUEST_LOG&quot;</span> <br>   (<span class="hljs-string">&quot;ID&quot;</span> <span class="hljs-built_in">NUMBER</span>, <br><span class="hljs-string">&quot;REQUEST_URL&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">100</span>), <br><span class="hljs-string">&quot;REQUEST_DATA&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">1000</span>), <br><span class="hljs-string">&quot;IP&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">20</span>), <br><span class="hljs-string">&quot;RESPONSE_DATA&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">1000</span>), <br><span class="hljs-string">&quot;TYPE_CODE&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">50</span>), <br><span class="hljs-string">&quot;RECORD_TIME&quot;</span> <span class="hljs-built_in">TIMESTAMP</span> (<span class="hljs-number">6</span>), <br><span class="hljs-string">&quot;PARAM1&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">255</span>), <br><span class="hljs-string">&quot;PARAM2&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">255</span>), <br><span class="hljs-string">&quot;PARAM3&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">255</span>), <br><span class="hljs-string">&quot;PARAM4&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">255</span>), <br><span class="hljs-string">&quot;PARAM5&quot;</span> <span class="hljs-built_in">VARCHAR2</span>(<span class="hljs-number">255</span>)<br>   ) <span class="hljs-keyword">SEGMENT</span> <span class="hljs-keyword">CREATION</span> <span class="hljs-keyword">IMMEDIATE</span> <br>  PCTFREE <span class="hljs-number">10</span> <span class="hljs-keyword">PCTUSED</span> <span class="hljs-number">40</span> <span class="hljs-keyword">INITRANS</span> <span class="hljs-number">1</span> <span class="hljs-keyword">MAXTRANS</span> <span class="hljs-number">255</span> <span class="hljs-keyword">NOCOMPRESS</span> <span class="hljs-keyword">LOGGING</span><br>  <span class="hljs-keyword">STORAGE</span>(<span class="hljs-keyword">INITIAL</span> <span class="hljs-number">65536</span> <span class="hljs-keyword">NEXT</span> <span class="hljs-number">8192</span> <span class="hljs-keyword">MINEXTENTS</span> <span class="hljs-number">1</span> <span class="hljs-keyword">MAXEXTENTS</span> <span class="hljs-number">2147483645</span><br>  <span class="hljs-keyword">PCTINCREASE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">FREELISTS</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FREELIST</span> <span class="hljs-keyword">GROUPS</span> <span class="hljs-number">1</span> <span class="hljs-keyword">BUFFER_POOL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">FLASH_CACHE</span> <span class="hljs-keyword">DEFAULT</span> CELL_FLASH_CACHE <span class="hljs-keyword">DEFAULT</span>)<br></code></pre></td></tr></table></figure><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PsamRequestLogEntity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">KmsRequestLog</span>  </span>&#123;<br><br>    <span class="hljs-meta">@ExtendColumnName(&quot;PARAM1&quot;)</span><br>    <span class="hljs-keyword">private</span> String psamNo;<br><br>    <span class="hljs-meta">@ExtendColumnName(&quot;PARAM2&quot;)</span><br>    <span class="hljs-keyword">private</span> String code;<br><br>    <span class="hljs-meta">@ExtendColumnName(&quot;PARAM3&quot;)</span><br>    <span class="hljs-keyword">private</span> String lanNo;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Intercepts(</span><br><span class="hljs-meta">        &#123;</span><br><span class="hljs-meta">                @Signature(type = Executor.class, method = &quot;query&quot;,</span><br><span class="hljs-meta">                        args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;),</span><br><span class="hljs-meta">                @Signature(type = Executor.class, method = &quot;query&quot;,</span><br><span class="hljs-meta">                        args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),</span><br><span class="hljs-meta">                @Signature(type = Executor.class, method = &quot;update&quot;,</span><br><span class="hljs-meta">                        args = &#123;MappedStatement.class, Object.class&#125;)</span><br><span class="hljs-meta">        &#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestLogExtendColumnInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">// 获取sql</span><br>        String sql = getSqlByInvocation(invocation);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(sql)) &#123;<br>            <span class="hljs-keyword">return</span> invocation.proceed();<br>        &#125;<br><br>        <span class="hljs-comment">// 找出需要替换的字段</span><br>        Map&lt;String, ExtendColumnName&gt; extendColumnNames = getExtendColumn(invocation);<br><br>        <span class="hljs-keyword">if</span> (extendColumnNames.size() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> invocation.proceed();<br>        &#125;<br><br>        <span class="hljs-comment">// sql交由处理类处理  对sql语句进行处理</span><br>        String newSql = getExtendSql(extendColumnNames,sql);<br><br>        <span class="hljs-comment">// 包装sql后，重置到invocation中</span><br>        resetSql2Invocation(invocation, newSql);<br><br>        <span class="hljs-keyword">return</span> invocation.proceed();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getExtendSql</span><span class="hljs-params">(Map&lt;String, ExtendColumnName&gt; extendColumnNames, String sql)</span> </span>&#123;<br>        String retVal = sql;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, ExtendColumnName&gt; stringExtendColumnNameEntry : extendColumnNames.entrySet()) &#123;<br>            String key = stringExtendColumnNameEntry.getKey();<br>            ExtendColumnName value = stringExtendColumnNameEntry.getValue();<br>            <span class="hljs-comment">// 将sql中的属性名 替换成 注解上的名字</span><br>            retVal = retVal.replace(key,value.value());<br>        &#125;<br>        <span class="hljs-keyword">return</span> retVal;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取需要替换字段名的属性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> invocation</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Map&lt;String, ExtendColumnName&gt; <span class="hljs-title">getExtendColumn</span><span class="hljs-params">(Invocation invocation)</span> </span>&#123;<br>        Map&lt;String, ExtendColumnName&gt; retVal = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        Object arg = invocation.getArgs()[<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">// 当接口的方法有多个参数时，arg[1] 的对象为 MapperMethod.ParamMap，只有一个参数时，arg[1] 就是参数本身</span><br>        <span class="hljs-keyword">if</span> (arg <span class="hljs-keyword">instanceof</span> MapperMethod.ParamMap)&#123;<br>            MapperMethod.ParamMap paramMap = (MapperMethod.ParamMap) arg;<br>            Collection values = paramMap.values();<br>            <span class="hljs-keyword">for</span> (Object value : values) &#123;<br>                <span class="hljs-keyword">if</span> (value != <span class="hljs-keyword">null</span>) &#123;<br>                    getExtendColumn(retVal, value);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            getExtendColumn(retVal,arg);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> retVal;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getExtendColumn</span><span class="hljs-params">(Map&lt;String, ExtendColumnName&gt; retVal, Object arg)</span> </span>&#123;<br>        Field[] declaredFields = getAllFields(arg);<br>        <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>            ExtendColumnName annotation = declaredField.getAnnotation(ExtendColumnName.class);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != annotation)&#123;<br>                <span class="hljs-comment">// 如果属性上有 ExtendColumnName 该注解，就放入返回值中</span><br>                retVal.put(declaredField.getName(),annotation);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">plugin</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Plugin.wrap(target,<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> invocation</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getSqlByInvocation</span><span class="hljs-params">(Invocation invocation)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Object[] args = invocation.getArgs();<br>        MappedStatement ms = (MappedStatement) args[<span class="hljs-number">0</span>];<br>        Object parameterObject = args[<span class="hljs-number">1</span>];<br>        BoundSql boundSql = ms.getBoundSql(parameterObject);<br>        <span class="hljs-keyword">return</span> boundSql.getSql();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 包装sql后，重置到invocation中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> invocation</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resetSql2Invocation</span><span class="hljs-params">(Invocation invocation, String sql)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">final</span> Object[] args = invocation.getArgs();<br>        MappedStatement statement = (MappedStatement) args[<span class="hljs-number">0</span>];<br>        Object parameterObject = args[<span class="hljs-number">1</span>];<br>        BoundSql boundSql = statement.getBoundSql(parameterObject);<br>        MappedStatement newStatement = newMappedStatement(statement, <span class="hljs-keyword">new</span> BoundSqlSqlSource(boundSql));<br>        MetaObject msObject =  MetaObject.forObject(newStatement, <span class="hljs-keyword">new</span> DefaultObjectFactory(), <span class="hljs-keyword">new</span> DefaultObjectWrapperFactory(),<span class="hljs-keyword">new</span> DefaultReflectorFactory());<br>        msObject.setValue(<span class="hljs-string">&quot;sqlSource.boundSql.sql&quot;</span>, sql);<br>        args[<span class="hljs-number">0</span>] = newStatement;<br><br>        <span class="hljs-comment">// 如果参数个数为6，还需要处理 BoundSql 对象</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> == args.length)&#123;<br>            BoundSql boundSqlArg = (BoundSql) args[<span class="hljs-number">5</span>];<br>            <span class="hljs-comment">// 该对象没有提供对sql属性的set方法，只能通过反射进行修改</span><br>            Class&lt;? extends BoundSql&gt; aClass = boundSql.getClass();<br>            <span class="hljs-keyword">try</span> &#123;<br>                Field field = aClass.getDeclaredField(<span class="hljs-string">&quot;sql&quot;</span>);<br>                field.setAccessible(<span class="hljs-keyword">true</span>);<br>                field.set(boundSqlArg,sql);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> MappedStatement <span class="hljs-title">newMappedStatement</span><span class="hljs-params">(MappedStatement ms, SqlSource newSqlSource)</span> </span>&#123;<br>        MappedStatement.Builder builder =<br>                <span class="hljs-keyword">new</span> MappedStatement.Builder(ms.getConfiguration(), ms.getId(), newSqlSource, ms.getSqlCommandType());<br>        builder.resource(ms.getResource());<br>        builder.fetchSize(ms.getFetchSize());<br>        builder.statementType(ms.getStatementType());<br>        builder.keyGenerator(ms.getKeyGenerator());<br>        <span class="hljs-keyword">if</span> (ms.getKeyProperties() != <span class="hljs-keyword">null</span> &amp;&amp; ms.getKeyProperties().length != <span class="hljs-number">0</span>) &#123;<br>            StringBuilder keyProperties = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">for</span> (String keyProperty : ms.getKeyProperties()) &#123;<br>                keyProperties.append(keyProperty).append(<span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>            keyProperties.delete(keyProperties.length() - <span class="hljs-number">1</span>, keyProperties.length());<br>            builder.keyProperty(keyProperties.toString());<br>        &#125;<br>        builder.timeout(ms.getTimeout());<br>        builder.parameterMap(ms.getParameterMap());<br>        builder.resultMaps(ms.getResultMaps());<br>        builder.resultSetType(ms.getResultSetType());<br>        builder.cache(ms.getCache());<br>        builder.flushCacheRequired(ms.isFlushCacheRequired());<br>        builder.useCache(ms.isUseCache());<br><br>        <span class="hljs-keyword">return</span> builder.build();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field[] getAllFields(Object object)&#123;<br>        Class clazz = object.getClass();<br>        List&lt;Field&gt; fieldList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (clazz != <span class="hljs-keyword">null</span>)&#123;<br>            fieldList.addAll(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(clazz.getDeclaredFields())));<br>            clazz = clazz.getSuperclass();<br>        &#125;<br>        Field[] fields = <span class="hljs-keyword">new</span> Field[fieldList.size()];<br>        fieldList.toArray(fields);<br>        <span class="hljs-keyword">return</span> fields;<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">//    定义一个内部辅助类，作用是包装sq</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BoundSqlSqlSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SqlSource</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> BoundSql boundSql;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BoundSqlSqlSource</span><span class="hljs-params">(BoundSql boundSql)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.boundSql = boundSql;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BoundSql <span class="hljs-title">getBoundSql</span><span class="hljs-params">(Object parameterObject)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> boundSql;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;PsamRequestLog&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;net.rjgf.bg.modules.sys.entity.bean.PsamRequestLogEntity&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;record_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;recordTime&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ip&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ip&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;request_data&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;requestData&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;response_data&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;responseData&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;request_url&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;requestUrl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_code&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;typeCode&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;PARAM1&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;psamNo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;PARAM2&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;code&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;PARAM3&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lanNo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--查询--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPSAMLogByConditions&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;net.rjgf.bg.modules.sys.entity.so.PsamRequestLogSo&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;PsamRequestLog&quot;</span>&gt;</span><br>        select * from KMS_REQUEST_LOG<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;so.ip != null and so.ip != &#x27;&#x27;&quot;</span>&gt;</span><br>                and ip like concat(&#x27;%&#x27;,concat(#&#123;so.ip&#125;,&#x27;%&#x27;))<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;so.typeCode != null and so.typeCode != &#x27;&#x27;&quot;</span>&gt;</span><br>                and type_code like concat(&#x27;%&#x27;,concat(#&#123;so.typeCode&#125;,&#x27;%&#x27;))<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;so.psamNo != null and so.psamNo != &#x27;&#x27;&quot;</span>&gt;</span><br>                and psamNo like concat(&#x27;%&#x27;,concat(#&#123;so.psamNo&#125;,&#x27;%&#x27;))<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;so.code != null and so.code != &#x27;&#x27;&quot;</span>&gt;</span><br>                and code like concat(&#x27;%&#x27;,concat(#&#123;so.code&#125;,&#x27;%&#x27;))<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;so.lanNo != null and so.lanNo != &#x27;&#x27;&quot;</span>&gt;</span><br>                and lanNo like concat(&#x27;%&#x27;,concat(#&#123;so.lanNo&#125;,&#x27;%&#x27;))<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;so.startTime != null and so.startTime != &#x27;&#x27;&quot;</span>&gt;</span><br>                and record_time &gt;= to_date(#&#123;so.startTime&#125;,&#x27;yyyy-mm-dd&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;so.endTime != null and so.endTime != &#x27;&#x27;&quot;</span>&gt;</span><br>                and to_date(#&#123;so.endTime&#125;,&#x27;yyyy-mm-dd&#x27;) &gt;= record_time<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;so.requestUrl != null and so.requestUrl != &#x27;&#x27;&quot;</span>&gt;</span><br>                and request_url like concat(&#x27;%&#x27;,concat(#&#123;so.requestUrl&#125;,&#x27;%&#x27;))<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--新增Psam请求日志--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertPsamLog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;net.rjgf.kms.forward.entity.bean.PsamRequestLogEntity&quot;</span>&gt;</span><br>        INSERT INTO KMS_REQUEST_LOG(ID,REQUEST_URL, REQUEST_DATA, IP, RESPONSE_DATA, TYPE_CODE, RECORD_TIME, psamNo,lanNo,code)<br>        VALUES ( KMS_REQUEST_LOG_SEQ.NEXTVAL,#&#123;requestUrl,jdbcType=VARCHAR&#125;, #&#123;requestData, jdbcType=VARCHAR&#125;, #&#123;ip, jdbcType=VARCHAR&#125;, #&#123;responseData, jdbcType=VARCHAR&#125;, #&#123;typeCode, jdbcType=VARCHAR&#125;, #&#123;recordTime, jdbcType=VARCHAR&#125;, #&#123;psamNo, jdbcType=VARCHAR&#125;, #&#123;lanNo, jdbcType=VARCHAR&#125;, #&#123;code, jdbcType=VARCHAR&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>这样就不需要管数据库「扩展字段名」与代码实体类中「属性名」的对应关系了</p><h2 id="拦截器中需要注意的地方"><a href="#拦截器中需要注意的地方" class="headerlink" title="拦截器中需要注意的地方"></a>拦截器中需要注意的地方</h2><p>sql修改后要更新两个对象 「MappedStatement」与「BoundSql」都修改下最好，因为源码中有时候用到了BoundSql对象来获取sql语句</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>mybaits</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java二叉树（TreeSet）实现</title>
    <link href="/2019/02/27/treeSet/"/>
    <url>/2019/02/27/treeSet/</url>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">实现了两种遍历方式<br>1.从根节点开始找<br>2.从最小节点开始找（jdk采用该方式）<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kangxuan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/2/27 0027 11:29.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: treeSet</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortTree</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SortTree sortTree = <span class="hljs-keyword">new</span> SortTree();<br><br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> randomInt = random.nextInt(<span class="hljs-number">100</span>);<br>            sortTree.add(randomInt);<br>            <span class="hljs-comment">// 打印存入的值</span><br>            System.out.print(randomInt + <span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 从根节点开始寻找从小到大的节点</span><br>        sortTree.print();<br>        System.out.println();<br><br>        <span class="hljs-comment">// 从最小节点开始寻找从小到大的节点</span><br>        sortTree.printFromFirstNode(sortTree.getFirstNode());<br>    &#125;<br><br>    Node rootNode;<br><br>    <span class="hljs-comment">// 打印</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        print(rootNode);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 该打印方法的思路是从根节点开始找</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rootNode</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Node rootNode)</span></span>&#123;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 控制只输出一次</span><br>        <span class="hljs-keyword">if</span> (rootNode == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 当该节点没下一个节点时</span><br>        <span class="hljs-keyword">if</span> (rootNode.leftNode == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span> (!flag) &#123;<br>                System.out.print(rootNode.data + <span class="hljs-string">&quot;,&quot;</span>);<br>                flag = <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br><span class="hljs-comment">// 打印左边节点</span><br>        print(rootNode.leftNode);<br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            System.out.print(rootNode.data + <span class="hljs-string">&quot;,&quot;</span>);<br>            flag = <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// 打印右边节点</span><br>        print(rootNode.rightNode);<br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            System.out.print(rootNode.data + <span class="hljs-string">&quot;,&quot;</span>);<br>            flag = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 该打印方法的思路是从最小值节点开始找</span><br><span class="hljs-comment">     *  jdk中的TreeMap采用的是从最小节点开始找的方式</span><br><span class="hljs-comment">     *      寻找上一个没打印过的节点</span><br><span class="hljs-comment">     *      我：通过属性标记是否打印过</span><br><span class="hljs-comment">     *      jdk: 判断该节点 的父节点 的右节点 是否等于该节点，如果是，则继续往上找</span><br><span class="hljs-comment">     *          详见：TreeMap类中子类Entry中的successor方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> firstNode</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printFromFirstNode</span><span class="hljs-params">(Node firstNode)</span></span>&#123;<br>        System.out.print(firstNode.data + <span class="hljs-string">&quot;,&quot;</span>);<br>        firstNode.isPrint = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">if</span> (firstNode.rightNode != <span class="hljs-keyword">null</span>)&#123;<br>            printFromFirstNode(getFirstNode(firstNode.rightNode));<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != firstNode.preNode) &#123;<br>            <span class="hljs-comment">// 寻找上一个没打印过的节点</span><br>            Node next = getNext(firstNode.preNode);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != next) &#123;<br>                printFromFirstNode(next);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 寻找上一个没打印过的节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> preNode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">getNext</span><span class="hljs-params">(Node preNode)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (preNode != <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">if</span> (preNode.isPrint)&#123;<br>            <span class="hljs-keyword">return</span> getNext(preNode.preNode);<br>        &#125;<br>        <span class="hljs-keyword">return</span> preNode;<br>    &#125;<br><br><span class="hljs-comment">// 获取最小节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">getFirstNode</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> getFirstNode(rootNode);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">getFirstNode</span><span class="hljs-params">(Node rootNode)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (rootNode.leftNode == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> rootNode;<br>        <span class="hljs-keyword">return</span> getFirstNode(rootNode.leftNode);<br>    &#125;<br><br><span class="hljs-comment">// 添加数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Integer data)</span></span>&#123;<br>        <span class="hljs-comment">// 第一次加入数据</span><br>        <span class="hljs-keyword">if</span> (rootNode == <span class="hljs-keyword">null</span>)&#123;<br>            rootNode = <span class="hljs-keyword">new</span> Node(data);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 添加数据</span><br>        addValue(rootNode,data);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addValue</span><span class="hljs-params">(Node rootNode, Integer newData)</span> </span>&#123;<br>        Integer oldData = rootNode.data;<br>        <span class="hljs-keyword">if</span> (oldData == newData) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 右节点</span><br>        <span class="hljs-keyword">if</span> (oldData &lt; newData)&#123;<br>            Node rightNode = rootNode.rightNode;<br>            <span class="hljs-keyword">if</span> (rightNode == <span class="hljs-keyword">null</span>)&#123;<br>                rightNode = <span class="hljs-keyword">new</span> Node(newData);<br>                rightNode.preNode = rootNode;<br><br>                rootNode.rightNode = rightNode;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                addValue(rightNode,newData);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 左节点</span><br>        <span class="hljs-keyword">if</span> (newData &lt; oldData)&#123;<br>            Node leftNode = rootNode.leftNode;<br>            <span class="hljs-keyword">if</span> (leftNode == <span class="hljs-keyword">null</span>)&#123;<br>                leftNode = <span class="hljs-keyword">new</span> Node(newData);<br>                leftNode.preNode = rootNode;<br><br>                rootNode.leftNode = leftNode;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                addValue(leftNode,newData);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-comment">// 数据</span><br>    Integer data;<br>    <span class="hljs-comment">// 上一个节点</span><br>    Node preNode;<br>    <span class="hljs-comment">// 左节点</span><br>    Node leftNode;<br>    <span class="hljs-comment">// 右节点</span><br>    Node rightNode;<br><br>    <span class="hljs-comment">// 是否打印过</span><br>    <span class="hljs-keyword">boolean</span> isPrint;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Integer data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>有不对的地方还请大家指教！</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>jdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过aop 解决微服务中 跨服连表查询</title>
    <link href="/2019/01/18/springCloudAopCrosTable/"/>
    <url>/2019/01/18/springCloudAopCrosTable/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs txt">在微服务架构中，我们需要对模块进行较细的拆分，但是对应到具体业务时，<br>又需要这些服务一起提供数据，这时可能就需要跨服务进行关联查询。<br>具体例子：<br>把数据库层划分为：<br>基础数据服<br>    订单数据服<br>现有一个具体业务：<br>查询订单信息<br>分析：<br>订单主表信息是在订单数据服中进行查询<br>订单主表中包含有商品信息，商品信息属于基础数据<br>在以往的架构中：两个服务是在同一个数据库中，我们可以直接写sql语句，进行链接查询<br>在微服务架构中：由于两张表归不同的服务管理，那么很有可能两张表不在同一个数据库中，我们无法进行连表查询<br> 我们只能先查询出订单表信息，然后再拿出订单表中保存的商品主键，去基础数据服中查询商品信息。**本文解决的问题就是，简化这个过程**<br></code></pre></td></tr></table></figure><h1 id="预期的结果"><a href="#预期的结果" class="headerlink" title="预期的结果"></a>预期的结果</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">当需要进行连表查询时，只需要配置下 **服务名称** **表名**，自动会去其他服进行查询，并把结果进行填充，不需要自己再写代码去处理。<br></code></pre></td></tr></table></figure><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><blockquote><p>通过aop来实现这一功能</p></blockquote><p>计划</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.在需要连表查询的 mapper 接口方法中加上 @NeedJoinQuery 自定义接口<br>2.通过 aop 对 @NeedJoinQuery 该注解标识的方法进行拦截<br>3.在接收查询结果的实体类中需要关联查询的属性上面 加上自定义注解 @JoinQuery，并配置上 服务名，表名<br>4.在切面实现中进行处理<br></code></pre></td></tr></table></figure><h1 id="Aop切面实现类"><a href="#Aop切面实现类" class="headerlink" title="Aop切面实现类"></a>Aop切面实现类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DifferentServerJoinQueryAspect</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理需要在服务间进行连表查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(value = &quot;@annotation(com.csbr.common.annotation.NeedJoinQuery)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  Object <span class="hljs-title">joinQueryAfterAdvice</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span></span>&#123;<br>        Object returnValue = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            returnValue = joinPoint.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (returnValue == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> returnValue;<br>        &#125;<br><br>        <span class="hljs-comment">// 处理结果</span><br>        handlerJoinQuery(returnValue);<br><br>        <span class="hljs-keyword">return</span> returnValue;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> &lt;T extends ResponseModel&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">handlerJoinQuery</span><span class="hljs-params">(Object returnValue)</span></span>&#123;<br>        <span class="hljs-comment">// 返回实体的 class对象</span><br>        Class&lt;T&gt; aClass ;<br>        List&lt;T&gt; listValue = <span class="hljs-keyword">new</span> ArrayList&lt;T&gt;() ;<br>        <span class="hljs-keyword">if</span> (returnValue <span class="hljs-keyword">instanceof</span> List)&#123;<br>             listValue = (List&lt;T&gt;) returnValue;<br>            <span class="hljs-comment">// 获取泛型的 class 对象</span><br>            <span class="hljs-keyword">if</span> (listValue.size() == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                aClass = (Class&lt;T&gt;) listValue.get(<span class="hljs-number">0</span>).getClass();<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            aClass = (Class&lt;T&gt;)returnValue.getClass();<br>        &#125;<br><br>        <span class="hljs-comment">// 找出需要连表查询的属性</span><br>        Map&lt;Field, JoinQuery&gt; fieldMap = CommonUtil.getFieldsAnnotation(aClass,JoinQuery.class);<br>        <span class="hljs-comment">// 对每个属性进行处理</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Field, JoinQuery&gt; stringAnnotationEntry : fieldMap.entrySet()) &#123;<br>            Field field = stringAnnotationEntry.getKey();<br>            <span class="hljs-comment">// 属性名</span><br>            String fieldName = field.getName();<br>            <span class="hljs-comment">// 注解对象</span><br>            JoinQuery annotation =  stringAnnotationEntry.getValue();<br>            String serverId = annotation.serverId();<br>            String tableName = annotation.tableName();<br>            String guidName = annotation.guidName();<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 根据serverId获取feign实例，</span><br><span class="hljs-comment">             * 1.如果是用<span class="hljs-doctag">@FeignClient</span>注解生成的代理类，那么实例在容器中的名字为 serverId + “FeignClient”</span><br><span class="hljs-comment">             * 2.如果是自定义的Feign 代理类，那么这里还需要改进。</span><br><span class="hljs-comment">             *      如果在容器中读取不到，应该到一个Feign集合中去读取，如果还是读取不到，抛出异常</span><br><span class="hljs-comment">             *      Feign集合应该是开发人员自定义代理类时加入进去</span><br><span class="hljs-comment">             */</span><br>            CrudCommonFeignClient crudCommonFeignClient = (CrudCommonFeignClient)GlobalSpringUtil.getBeanByName(serverId + <span class="hljs-string">&quot;FeignClient&quot;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == crudCommonFeignClient)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;spring容器中无法获取到 &quot;</span>+serverId+<span class="hljs-string">&quot; 服务的基础feign调用实例！&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// 返回集合</span><br>            <span class="hljs-keyword">if</span> (returnValue <span class="hljs-keyword">instanceof</span> List)&#123;<br>                <span class="hljs-comment">/** guid集合 */</span><br>                List&lt;String&gt; guidList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>                <span class="hljs-comment">/** key：主键值，value：对应的对象 */</span><br>                Map&lt;String,Object&gt; guidAndObj = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (T obj : listValue) &#123;<br>                    <span class="hljs-comment">// 获取需要关联查询的对象</span><br>                    Object get = CommonUtil.optFieldValue(obj, fieldName, <span class="hljs-string">&quot;get&quot;</span>);<br>                    <span class="hljs-comment">// 获取关联查询对象的主键值</span><br>                    String o = (String)CommonUtil.optFieldValue(get, guidName, <span class="hljs-string">&quot;get&quot;</span>);<br>                    guidList.add(o);<br>                    guidAndObj.put(o,get);<br>                &#125;<br>                String s;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 去其他服务进行数据请求</span><br>                    s = crudCommonFeignClient.selectByGuids(tableName, CommonUtil.concatBySeparator(guidList,<span class="hljs-string">&quot;,&quot;</span>));<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    e.printStackTrace();<br>                    <span class="hljs-comment">// 发生错误时，进行下一个属性的查询</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br><br>                <span class="hljs-comment">// 处理数据</span><br>                ResponseList&lt;T&gt; responseBean = JSON.parseObject(s, <span class="hljs-keyword">new</span> TypeReference&lt;ResponseList&lt;T&gt;&gt;(field.getType()) &#123;&#125;);<br>                <span class="hljs-keyword">if</span> (responseBean.isSuccess())&#123;<br>                    List&lt;T&gt; datas = responseBean.getDatas();<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != datas)&#123;<br>                        <span class="hljs-keyword">for</span> (T data : datas) &#123;<br>                            <span class="hljs-comment">// 获取关联查询对象的主键值，这是获得的guid</span><br>                            String retGuid = (String)CommonUtil.optFieldValue(data, guidName, <span class="hljs-string">&quot;get&quot;</span>);<br>                            <span class="hljs-comment">// 根据guid 获取对应的返回值中的对象</span><br>                            Object queryObj = guidAndObj.get(retGuid);<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != queryObj)&#123;<br>                                <span class="hljs-comment">// 把服务调用获得的值 复制到 查询得到的对象中</span><br>                                BeanUtils.copyProperties(data,queryObj);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 返回对象</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 获取需要关联查询的对象</span><br>                Object get = CommonUtil.optFieldValue(returnValue, fieldName, <span class="hljs-string">&quot;get&quot;</span>);<br>                <span class="hljs-comment">// 获取关联查询对象的主键值</span><br>                Object o = CommonUtil.optFieldValue(get, guidName, <span class="hljs-string">&quot;get&quot;</span>);<br>                <span class="hljs-comment">// 去其他服务进行数据请求</span><br>                String s = crudCommonFeignClient.selectByGuid(tableName, o.toString());<br><br>                <span class="hljs-comment">// 处理获取的结果</span><br>                ResponseBean&lt;T&gt; responseBean = JSON.parseObject(s, <span class="hljs-keyword">new</span> TypeReference&lt;ResponseBean&lt;T&gt;&gt;(field.getType()) &#123;&#125;);<br>                T data = responseBean.getData();<br>                <span class="hljs-keyword">if</span> (responseBean.isSuccess() &amp;&amp; <span class="hljs-keyword">null</span> != data)&#123;<br>                    <span class="hljs-comment">// 把获取到的数据设置到返回值中</span><br>                    CommonUtil.optFieldValue(returnValue, fieldName, <span class="hljs-string">&quot;set&quot;</span>,data);<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mapper文件"><a href="#Mapper文件" class="headerlink" title="Mapper文件"></a>Mapper文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TrprescriptionMapper</span> </span>&#123;<br>    <span class="hljs-meta">@NeedJoinQuery</span><br>    <span class="hljs-function">TrprescriptionResponse <span class="hljs-title">getTrprescriptionById</span><span class="hljs-params">(String id)</span></span>;<br>    <span class="hljs-meta">@NeedJoinQuery</span><br>    <span class="hljs-function">List&lt;TrprescriptionResponse&gt; <span class="hljs-title">searchTrprescriptions</span><span class="hljs-params">(TrprescriptionSO so)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.csbr.cloud.ordercenter.dto.response;<br><br><span class="hljs-keyword">import</span> com.csbr.common.annotation.JoinQuery;<br><span class="hljs-keyword">import</span> com.csbr.common.service.ResponseModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><br><span class="hljs-keyword">import</span> java.sql.Timestamp;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kangxuan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-01-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrprescriptionResponse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResponseModel</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String guid;<br>  <br>    <span class="hljs-meta">@JoinQuery(serverId = &quot;basic-data&quot;,tableName = &quot;Mfmed&quot;)</span><br>    <span class="hljs-keyword">private</span> MfmedResponse med;<br><br>    <span class="hljs-keyword">private</span> List&lt;TrprescriptiondetailResponse&gt; details;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MfmedResponse <span class="hljs-title">getMed</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> med;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMed</span><span class="hljs-params">(MfmedResponse med)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.med = med;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> JoinQuery &#123;<br><br>    <span class="hljs-comment">/** 该属性需要访问的微服务名称 */</span><br>    <span class="hljs-function">String <span class="hljs-title">serverId</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/** 表名 */</span><br>    <span class="hljs-function">String <span class="hljs-title">tableName</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/** 主键名称，默认是 guid */</span><br>    <span class="hljs-function">String <span class="hljs-title">guidName</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;guid&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> NeedJoinQuery &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="aop中用到的工具类CommonUtils"><a href="#aop中用到的工具类CommonUtils" class="headerlink" title="aop中用到的工具类CommonUtils"></a>aop中用到的工具类CommonUtils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 反射获操作对象中某属性的值</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> fieldName</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Object <span class="hljs-title">optFieldValue</span><span class="hljs-params">(Object obj,String fieldName,String methodPrefix,Object... args)</span></span>&#123;<br>       Class aClass = obj.getClass();<br>       String methodName = methodPrefix + fieldName.substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).toUpperCase()+fieldName.substring(<span class="hljs-number">1</span>,fieldName.length());<br>       <span class="hljs-keyword">try</span> &#123;<br><br>           <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;get&quot;</span>.equals(methodPrefix))&#123;<br>               Method method = aClass.getMethod(methodName);<br>               Object invoke = method.invoke(obj);<br>               <span class="hljs-keyword">return</span> invoke;<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;set&quot;</span>.equals(methodPrefix))&#123;<br>               List&lt;Class&gt; classList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>               <span class="hljs-keyword">for</span> (Object arg : args) &#123;<br>                   classList.add(arg.getClass());<br>               &#125;<br>               Method method = aClass.getMethod(methodName,classList.toArray(<span class="hljs-keyword">new</span> Class[]&#123;&#125;));<br>               method.invoke(obj,args);<br>           &#125;<br><br>       &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>           e.printStackTrace();<br>       &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>           e.printStackTrace();<br>       &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>           e.printStackTrace();<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 获取 某字节码对象中，拥有某注解的属性集合</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> aClass class对象</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> annotationClass 注解class对象</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> map key:属性对象  value：注解对象</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T extends Annotation&gt;  <span class="hljs-function">Map&lt;Field,T&gt; <span class="hljs-title">getFieldsAnnotation</span><span class="hljs-params">(Class aClass,Class&lt;T&gt; annotationClass )</span></span>&#123;<br>       Field[] declaredFields = aClass.getDeclaredFields();<br>       Map&lt;Field, T&gt; fieldMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>       <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>           T annotation = declaredField.getAnnotation(annotationClass);<br>           <span class="hljs-keyword">if</span> (annotation != <span class="hljs-keyword">null</span>)&#123;<br>               fieldMap.put(declaredField,annotation);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> fieldMap;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 把list中的值根据分隔符进行拼接</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> strings</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> separator</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">concatBySeparator</span><span class="hljs-params">(List&lt;String&gt; strings,String separator)</span></span>&#123;<br>       StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer();<br>       <span class="hljs-keyword">for</span> (String string : strings) &#123;<br>           buffer.append(string).append(separator);<br>       &#125;<br>       String substring = buffer.substring(<span class="hljs-number">0</span>, buffer.length() - <span class="hljs-number">1</span>);<br><br>       <span class="hljs-keyword">return</span> substring;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 把 字符串根据 分隔符 分割，返回list集合</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> separator 分隔符</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">splitBySeparator</span><span class="hljs-params">(String content,String separator)</span></span>&#123;<br>       String[] split = content.split(separator);<br>       <span class="hljs-keyword">return</span> Arrays.asList(split);<br>   &#125;<br></code></pre></td></tr></table></figure><hr><h2 id="aop逻辑修改"><a href="#aop逻辑修改" class="headerlink" title="aop逻辑修改"></a>aop逻辑修改</h2><blockquote><p>分成两个步骤<br>    1.递归收集所有加了注解的字段，并进行汇总<br> 2.对手收集到的结果进行处理<br> 结果：可以自定义处理结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/1/18 0018 13:57.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 处理不同服务间的关联查询</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DifferentServerJoinQueryAspect2</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理需要在服务间进行连表查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(value = &quot;@annotation(com.csbr.common.annotation.NeedJoinQuery)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  Object <span class="hljs-title">joinQueryAfterAdvice</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span></span>&#123;<br>        Object returnValue = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            returnValue = joinPoint.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (returnValue == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> returnValue;<br>        &#125;<br><br>        <span class="hljs-comment">// 把注解信息收集起来,方便后面统一去请求获取数据，减少服务间请求次数</span><br>        Map&lt;JoinQuery, Map&lt;String, List&lt;Object&gt;&gt;&gt; annotationInfo = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        annotationInfoCollect(returnValue,annotationInfo);<br><br>        <span class="hljs-comment">// 处理结果</span><br>        handlerJoinQuery(annotationInfo);<br><br>        <span class="hljs-keyword">return</span> returnValue;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * feign 处理方式</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> &lt;T extends ResponseModel&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">handlerJoinQuery</span><span class="hljs-params">(Map&lt;JoinQuery, Map&lt;String, List&lt;Object&gt;&gt;&gt; annotationInfo)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (annotationInfo.size() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;JoinQuery, Map&lt;String, List&lt;Object&gt;&gt;&gt; joinQueryMapEntry : annotationInfo.entrySet()) &#123;<br>            JoinQuery annotation = joinQueryMapEntry.getKey();<br>            Map&lt;String, List&lt;Object&gt;&gt; guidAndObjs = joinQueryMapEntry.getValue();<br>            <span class="hljs-keyword">if</span> (guidAndObjs.size() == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 获取请求的一批guid</span><br>            Set&lt;String&gt; strings = guidAndObjs.keySet();<br>            String guids = CommonUtil.concatBySeparator(strings, <span class="hljs-string">&quot;,&quot;</span>);<br><br>            <span class="hljs-comment">// 进行请求</span><br>            String serverId = annotation.serverId();<br>            String tableName = annotation.tableName();<br>            String guidName = annotation.guidName();<br><br>            CrudCommonFeignClient crudCommonFeignClient = (CrudCommonFeignClient)GlobalSpringUtil.getBeanByName(serverId + <span class="hljs-string">&quot;FeignClient&quot;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == crudCommonFeignClient)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;spring容器中无法获取到 &quot;</span>+serverId+<span class="hljs-string">&quot; 服务的基础feign调用实例！&quot;</span>);<br>            &#125;<br><br>            String s;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 去其他服务进行数据请求</span><br>                s = crudCommonFeignClient.selectByGuids(tableName, guids);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                <span class="hljs-comment">// 发生错误时，进行下一个属性的查询</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 处理返回值</span><br>            Collection&lt;List&lt;Object&gt;&gt; values1 = guidAndObjs.values();<br>            Object o = <span class="hljs-keyword">new</span> Object();<br>            <span class="hljs-keyword">for</span> (List&lt;Object&gt; list : values1) &#123;<br>                o = list.get(<span class="hljs-number">0</span>);<br>            &#125;<br>            ResponseList&lt;T&gt; responseBean = JSON.parseObject(s, <span class="hljs-keyword">new</span> TypeReference&lt;ResponseList&lt;T&gt;&gt;(o.getClass()) &#123;<br>            &#125;);<br>            <span class="hljs-keyword">if</span> (responseBean.isSuccess()) &#123;<br>                List&lt;T&gt; datas = responseBean.getDatas();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != datas) &#123;<br>                    <span class="hljs-keyword">for</span> (T data : datas) &#123;<br>                        <span class="hljs-comment">// 获取关联查询对象的主键值，这是获得的guid</span><br>                        String retGuid = (String) CommonUtil.optFieldValue(data, guidName, <span class="hljs-string">&quot;get&quot;</span>);<br>                        <span class="hljs-comment">// 根据guid 获取对应的返回值中的对象</span><br>                        List&lt;Object&gt; queryObj = guidAndObjs.get(retGuid);<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != queryObj) &#123;<br>                            <span class="hljs-keyword">for</span> (Object realObj : queryObj) &#123;<br>                                <span class="hljs-comment">// 把服务调用获得的值 复制到 查询得到的对象中</span><br>                                BeanUtils.copyProperties(data, realObj);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收集注解信息，把需要对同一个服务同一张表的的guid汇总起来</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> returnValue</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> annotationInfo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> &lt;T extends ResponseModel&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">annotationInfoCollect</span><span class="hljs-params">(Object returnValue,Map&lt;JoinQuery, Map&lt;String, List&lt;Object&gt;&gt;&gt; annotationInfo)</span></span>&#123;<br>        <span class="hljs-comment">// 返回实体的 class对象</span><br>        Class&lt;T&gt; aClass ;<br>        <span class="hljs-keyword">if</span> (returnValue <span class="hljs-keyword">instanceof</span> List)&#123;<br>            List&lt;T&gt; listValue = (List&lt;T&gt;) returnValue;<br>            <span class="hljs-comment">// 获取泛型的 class 对象</span><br>            <span class="hljs-keyword">if</span> (listValue.size() == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (T t : listValue) &#123;<br>                    <span class="hljs-comment">// 递归调用</span><br>                    annotationInfoCollect(t,annotationInfo);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 处理对象</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// ---------1.处理 添加了@JoinQuery的 单个属性--------</span><br>            aClass = (Class&lt;T&gt;)returnValue.getClass();<br>            <span class="hljs-comment">// 找出需要连表查询的属性</span><br>            Map&lt;Field, JoinQuery&gt; fieldMap = CommonUtil.getFieldsAnnotation(aClass,JoinQuery.class);<br>            <span class="hljs-comment">// 获取该属性实际的值，并取出 guid</span><br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;Field, JoinQuery&gt; stringAnnotationEntry : fieldMap.entrySet()) &#123;<br>                Field field = stringAnnotationEntry.getKey();<br>                JoinQuery joinQuery = stringAnnotationEntry.getValue();<br><br>                <span class="hljs-comment">// 找出实际对象</span><br>                String fieldName = field.getName();<br>                String guidName = joinQuery.guidName();<br>                Object get = CommonUtil.optFieldValue(returnValue, fieldName, <span class="hljs-string">&quot;get&quot;</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == get)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-comment">// 获取guid，并把对应关系存入 annotaioninfo map中</span><br>                Object o = CommonUtil.optFieldValue(get, guidName, <span class="hljs-string">&quot;get&quot;</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != o)&#123;<br>                    String guid = o.toString();<br>                    <span class="hljs-keyword">if</span> (annotationInfo.containsKey(joinQuery))&#123;<br>                        Map&lt;String, List&lt;Object&gt;&gt; stringListMap = annotationInfo.get(joinQuery);<br>                        <span class="hljs-keyword">if</span> (stringListMap.containsKey(guid))&#123;<br>                            stringListMap.get(guid).add(get);<br>                        &#125;<span class="hljs-keyword">else</span> &#123;<br>                            List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>                            list.add(get);<br>                            stringListMap.put(guid,list);<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        Map&lt;String, List&lt;Object&gt;&gt; stringListMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>                        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>                        list.add(get);<br>                        stringListMap.put(guid,list);<br>                        annotationInfo.put(joinQuery,stringListMap);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// ---------2.处理 对象里面的list属性--------</span><br>            Field[] declaredFields = aClass.getDeclaredFields();<br>            <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>                <span class="hljs-keyword">if</span> (declaredField.getType().equals(List.class))&#123;<br>                    String fieldName = declaredField.getName();<br>                    Object get = CommonUtil.optFieldValue(returnValue, fieldName, <span class="hljs-string">&quot;get&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != get &amp;&amp; ((List)get).size() &gt; <span class="hljs-number">0</span>)&#123;<br>                      annotationInfoCollect(get,annotationInfo);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>代码已经过调试，逻辑没问题。但是各位看官估计是无法复制过去直接用，因为这是我结合现有项目写的，所以要用的话得自己改改。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>java</tag>
      
      <tag>aop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>feign 同一个服务编写多个远程调用实例 解决办法</title>
    <link href="/2019/01/16/fegin/"/>
    <url>/2019/01/16/fegin/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><pre><code>在微服务架构中，当我们需要进行服务间调用时可以选择feign组件，现在遇到的问题是：    当同一个服务，声明多个feign实例时，启动时直接报错</code></pre><p><strong>错误信息</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">Cannot define <span class="hljs-keyword">alias</span> <span class="hljs-string">&#x27;basic-dataFeignClient&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">name</span> <span class="hljs-string">&#x27;com.csbr.pharmacy.chain.cloud.service.operation.OperationFeignClient&#x27;</span>: It <span class="hljs-keyword">is</span> already registered <span class="hljs-keyword">for</span> <span class="hljs-keyword">name</span> <span class="hljs-string">&#x27;com.csbr.pharmacy.chain.cloud.service.BasicDataCommonFeignClient&#x27;</span>.<br></code></pre></td></tr></table></figure><p>猜测是因为@FeignClient注解的处理类在生成代理类，把代理类放入spring工厂中时，指定的名字规则就是   服务名+FeignClient，所以当有多个实例时，直接实例化失败</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><blockquote><p>通过 Feign.builder() 手动生成代理类</p></blockquote><p><strong>配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.csbr.pharmacy.chain.cloud.configurations;<br><br><span class="hljs-keyword">import</span> com.csbr.pharmacy.chain.cloud.service.operation.OperationFeignClient;<br><span class="hljs-keyword">import</span> com.netflix.appinfo.InstanceInfo;<br><span class="hljs-keyword">import</span> com.netflix.discovery.EurekaClient;<br><span class="hljs-keyword">import</span> feign.Contract;<br><span class="hljs-keyword">import</span> feign.Feign;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kangxuan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/1/16 0016 11:13.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 自定义 feign实例 配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeignClientConfig</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* FeignClientFactoryBean 该工厂类中 设置builder属性时就是通过该对象，源码中可看到</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FeignContext feignContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 通过注入Eureka实例对象，就不用手动指定url，只需要指定服务名即可</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EurekaClient eurekaClient;<br><br><br>    <span class="hljs-keyword">private</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">create</span><span class="hljs-params">(Class&lt;T&gt; clazz,String serverId)</span></span>&#123;<br>        InstanceInfo nextServerFromEureka = eurekaClient.getNextServerFromEureka(serverId,<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">return</span> Feign.builder()<br>                .encoder(feignContext.getInstance(serverId,feign.codec.Encoder.class))<br>                .decoder(feignContext.getInstance(serverId,feign.codec.Decoder.class))<br>                .contract(feignContext.getInstance(serverId, Contract.class))<br>                .target(clazz, nextServerFromEureka.getHomePageUrl());<br><br>    &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> OperationFeignClient <span class="hljs-title">getOperationFeignClient</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> create(OperationFeignClient.class,<span class="hljs-string">&quot;basic-data&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>OperationFeignClient 类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.csbr.pharmacy.chain.cloud.service.operation;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kangxuan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/12/28 0028 10:15.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 运营端专用 feign组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OperationFeignClient</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tableName 表名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 添加的实体类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/data/&#123;tableName&#125;/add&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-function">String  <span class="hljs-title">create</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;tableName&quot;)</span> String tableName,</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@RequestBody</span> Object data)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@FeignClient注解类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.csbr.pharmacy.chain.cloud.service;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kangxuan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/12/28 0028 10:15.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 基础数据服 调用 公共组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient(serviceId = &quot;basic-data&quot;,name = &quot;base&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span>  <span class="hljs-title">BasicDataCommonFeignClient</span>  </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tableName 表名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 添加的实体类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/data/&#123;tableName&#125;/add&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-function">String  <span class="hljs-title">create</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;tableName&quot;)</span> String tableName,</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@RequestBody</span> Object data)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tableName 表名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> guid guid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/data/&#123;tableName&#125;/&#123;guid&#125;&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-function">String <span class="hljs-title">selectByGuid</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;tableName&quot;)</span> String tableName,</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;guid&quot;)</span> String guid)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据条件查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tableName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/data/&#123;tableName&#125;/search&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-function">String <span class="hljs-title">selectByConditions</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;tableName&quot;)</span> String tableName,</span></span><br><span class="hljs-function"><span class="hljs-params">            Object data)</span></span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tableName 表名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> guid guid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/data/&#123;tableName&#125;/&#123;guid&#125;&quot;,method = RequestMethod.PUT)</span><br>    <span class="hljs-function">String <span class="hljs-title">update</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;tableName&quot;)</span> String tableName,</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;guid&quot;)</span> String guid,</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@RequestBody</span> Object data)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这样两个 feign 接口都能进行使用了</strong></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>filebeat +kafka + logstash收集日志信息</title>
    <link href="/2018/12/19/logCollect/"/>
    <url>/2018/12/19/logCollect/</url>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="选择原因"><a href="#选择原因" class="headerlink" title="选择原因"></a>选择原因</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">logstash 笨重，对环境需要 <span class="hljs-keyword">jdk </span><span class="hljs-number">1</span>.<span class="hljs-number">8</span>+，不适合部署在多个服务上<br>filebeat 是一个轻量级的日志监控工具，部署简单 无特殊环境要求<br>最终效果应该是：<br>在需要收集日志的服务器上部署 filebeat，然后发送到 kafka （可以进行集群）消息中间件，<br>然后在logstash 中监听 kafka 的消息即可<br></code></pre></td></tr></table></figure><h1 id="kafka-部署"><a href="#kafka-部署" class="headerlink" title="kafka 部署"></a>kafka 部署</h1><p>kafka 需要 zookeeper 环境，所以先安装 zookeeper</p><p><code>============================</code>zookeeper 安装 start<code>==============================</code></p><ol><li>zookeeper 下载地址：wget <a href="http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz">http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</a></li><li>tar -zvxf  解压</li><li>复制配置文件(配置文件中配置的端口，默认2181)：<br> cd conf<br> cp zoo_sample.cfg zoo.cfg</li><li>启动zookeeper： ./bin/zkServer.sh start</li></ol><p><code>============================</code>zookeeper 安装 end<code>==============================</code><br> <code>============================</code>kafka 安装start<code>==============================</code><br>5. 下载地址：<a href="http://mirrors.cnnic.cn/apache/kafka/">http://mirrors.cnnic.cn/apache/kafka/</a><br>6. 解压：tar -zvxf<br>7.  如果zookeeper 每个改端口，且安装在 同一台机器，那么直接启动 kafka<br>：bin/kafka-server-start.sh config/server.properties ，如果不是，修改 server.properties 文件<br>8. 创建主题：bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test<br>9. 启动生产者：bin/kafka-console-producer.sh –broker-list localhost:9092 –topic test<br>10. 启动消费者：bin/kafka-console-consumer.sh –bootstrap-server localhost:9092 –topic test –from-beginning<br>可以测试在生产者中输入数据，在消费者端就会有显示<br><strong>注意事项：</strong><br>        1.启动kafka之前需要启动 zookeeper<br>        2.如果启动kafka时报错：java.net.UnknownHostException: XX: XX: 未知的名称或服务<br>        解决办法：<br>            vi /etc/hosts<br>            加上<br>            127.0.0.1    XX<br> <code>============================</code> kafka 安装 end<code>==============================</code></p><h1 id="filebeat部署"><a href="#filebeat部署" class="headerlink" title="filebeat部署"></a>filebeat部署</h1><ol><li>下载<a href="https://www.elastic.co/downloads/beats/filebeat#ga-release">https://www.elastic.co/downloads/beats/filebeat#ga-release</a></li><li>解压：tar -zvxf filebeat-6.5.3-linux-x86_64.tar.gz</li><li>修改配置文件：<br> vi filebeat.yml<ol><li>配置监听的文件:<br> paths:<pre><code>     - /opt/test/test.log</code></pre></li><li>配置输出项：<br> 注释掉默认的elasticsearch 的输出项<br> 添加kafka的配置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">output.kafka:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;127.0.0.1:9092&quot;</span>] <span class="hljs-comment"># 生产者的地址</span><br>  <span class="hljs-attr">topic:</span> <span class="hljs-string">test</span>  <span class="hljs-comment"># 上面创建的kafka topic 名称</span><br></code></pre></td></tr></table></figure></li></ol></li><li>启动filebeat：./filebeat -e -c filebeat.yml    说明：-e 表示 Log to stderr and disable syslog/file output</li><li>测试：<br> 1.把上面kafka第10步的消费者起起来<br> 2.echo “test info” &gt;&gt; /opt/test/test.log<br> 3.观察 kafka 消费端 与 filebeat 端是否有对应的内容输出<br> <strong>注意：</strong> filebeat 收集到日志后 会把消息封装成一个json，传给 kafka的也是这个json</li></ol><h1 id="logstash-部署"><a href="#logstash-部署" class="headerlink" title="logstash 部署"></a>logstash 部署</h1><blockquote><p>该组件的安装详见 ELK 那篇文章 <a href="https://blog.csdn.net/zaige66/article/details/84104975">ELK搭建流程 从0到1 包含过程中遇到的问题</a></p></blockquote><p>logstah的配置文件修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs conf">input &#123;<br>    kafka&#123;<br>        bootstrap_servers &#x3D;&gt; [&quot;127.0.0.1:9092&quot;]  # 这里填生产者的地址<br>        client_id &#x3D;&gt; &quot;test&quot;<br>        group_id &#x3D;&gt; &quot;test&quot;<br>        auto_offset_reset &#x3D;&gt; &quot;latest&quot; <br>        consumer_threads &#x3D;&gt; 5<br>        decorate_events &#x3D;&gt; true <br>        topics &#x3D;&gt; [&quot;test&quot;]  # 这里填 topic 名<br>        type &#x3D;&gt; &quot;bhy&quot; <br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题</strong>：上面提到过，发送到kafka的数据是用json包装过信息的，包装后的样子<br>{“@timestamp”:”2018-12-19T19:08:15.483Z”,”@metadata”:{“beat”:”filebeat”,”type”:”doc”,”version”ector”:{“type”:”log”},”input”:{“type”:”log”},”beat”:{“hostname”:”kk”,”version”:”6.5.3”,”name”:tform”:”centos”,”version”:”6.10 (Final)”},”containerized”:true}}<br>{“@timestamp”:”2018-12-19T19:21:45.720Z”,”@metadata”:{“beat”:”filebeat”,”type”:”doc”,”version”:”6.5.3”,”topic”:”test”},”source”:”/opt/test/test.log”,”offset”:323,”message”:”ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff”,”input”:{“type”:”log”},”prospector”:{“type”:”log”},”beat”:{“version”:”6.5.3”,”name”:”kk”,”hostname”:”kk”},”host”:{“name”:”kk”,”architecture”:”x86_64”,”os”:{“family”:”redhat”,”codename”:”Final”,”platform”:”centos”,”version”:”6.10 (Final)”},”containerized”:true}}<br>里面的 ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 才是我需要的信息，所以在logstash的 filter 中需要进行配置，对数据进行处理<br><code>====================================问题解决==================================</code><br>logstash最终配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs conf">input &#123;<br>    kafka&#123;<br>        bootstrap_servers &#x3D;&gt; [&quot;127.0.0.1:9092&quot;]<br>        client_id &#x3D;&gt; &quot;test&quot;<br>        group_id &#x3D;&gt; &quot;test&quot;<br>        auto_offset_reset &#x3D;&gt; &quot;latest&quot; <br>        consumer_threads &#x3D;&gt; 5<br>        decorate_events &#x3D;&gt; true <br>        topics &#x3D;&gt; [&quot;test&quot;] <br>        type &#x3D;&gt; &quot;bhy&quot; <br>        codec &#x3D;&gt; json # 这里配置进行json解析<br>      &#125;<br><br>    file&#123;<br>       type &#x3D;&gt; &quot;execute&quot;<br>       path &#x3D;&gt; [&quot;&#x2F;opt&#x2F;test&#x2F;execute.log&quot;]<br>       &#125;<br>&#125;<br>filter &#123;<br><br>if [type] &#x3D;&#x3D; &quot;bhy&quot;&#123;<br># 这里对message字段（就是收集到的日志信息）进行匹配解析<br> grok &#123;<br>    patterns_dir &#x3D;&gt; [&quot;&#x2F;opt&#x2F;elk&#x2F;logstash-6.4.3&#x2F;patterns&quot;]<br>    match &#x3D;&gt; &#123;&quot;message&quot; &#x3D;&gt; &quot;%&#123;DATA:time&#125;\|%&#123;DATA:ip&#125;\|%&#123;DATA:request&#125;\|%&#123;JSON_PARAM:param&#125;&quot;&#125;<br>  &#125;<br><br># 这里对解析后的结果进行字段过滤，移除多余的字段<br>mutate &#123;<br>remove_field &#x3D;&gt;[&quot;prospector&quot;]<br>remove_field &#x3D;&gt;[&quot;host&quot;]<br>remove_field &#x3D;&gt;[&quot;message&quot;]<br>&#125;<br>  <br>&#125;<br><br>&#125;<br>output &#123;    <br>     stdout&#123;<br>              codec&#x3D;&gt;rubydebug<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>贴上最终结果</strong>：<br>输入日志信息：<br>    echo “time|ip|requet|param” &gt;&gt; /opt/test/test.log<br>logstash解析后的数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>         &quot;input&quot; =&gt; &#123;<br>        &quot;type&quot; =&gt; &quot;log&quot;<br>    &#125;,<br>    &quot;@timestamp&quot; =&gt; 2018-12-20T16:18:18.590Z,<br>      &quot;@version&quot; =&gt; &quot;1&quot;,<br>         &quot;param&quot; =&gt; &quot;param&quot;,<br>          &quot;type&quot; =&gt; &quot;bhy&quot;,<br>       &quot;request&quot; =&gt; &quot;requet&quot;,<br>          &quot;time&quot; =&gt; &quot;time&quot;,<br>            &quot;ip&quot; =&gt; &quot;ip&quot;,<br>          &quot;beat&quot; =&gt; &#123;<br>        &quot;hostname&quot; =&gt; &quot;kk&quot;,<br>         &quot;version&quot; =&gt; &quot;6.5.3&quot;,<br>            &quot;name&quot; =&gt; &quot;kk&quot;<br>    &#125;,<br>        &quot;offset&quot; =&gt; 655,<br>        &quot;source&quot; =&gt; &quot;/opt/test/test.log&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就能发送到elasticsearch了！</p><p>附上logstash配置参考链接：</p><blockquote><p>移除字段:<a href="https://blog.csdn.net/zhaoyangjian724/article/details/54343178">https://blog.csdn.net/zhaoyangjian724/article/details/54343178</a><br>抽取json :<a href="https://blog.csdn.net/zmx729618/article/details/80885179">https://blog.csdn.net/zmx729618/article/details/80885179</a></p></blockquote><p><code>==========================================================</code><br>结束！希望对大家有所帮助！</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>elk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>logstash</tag>
      
      <tag>filebeat</tag>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins 使用 总结</title>
    <link href="/2018/12/18/jenkins/"/>
    <url>/2018/12/18/jenkins/</url>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>这不是一篇从头到尾的教程，是我根据网上的教程进行搭建，中间遇到的问题或者说觉得重要的点的一些记录，适合参考着看。</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">wget</span> <span class="hljs-selector-tag">-O</span> /<span class="hljs-selector-tag">etc</span>/<span class="hljs-selector-tag">yum</span><span class="hljs-selector-class">.repos</span><span class="hljs-selector-class">.d</span>/<span class="hljs-selector-tag">jenkins</span><span class="hljs-selector-class">.repo</span> <span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">pkg</span><span class="hljs-selector-class">.jenkins</span><span class="hljs-selector-class">.io</span>/<span class="hljs-selector-tag">redhat</span>/<span class="hljs-selector-tag">jenkins</span><span class="hljs-selector-class">.repo</span><br><span class="hljs-selector-tag">rpm</span> <span class="hljs-selector-tag">--import</span> <span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">pkg</span><span class="hljs-selector-class">.jenkins</span><span class="hljs-selector-class">.io</span>/<span class="hljs-selector-tag">redhat</span>/<span class="hljs-selector-tag">jenkins</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.key</span><br><span class="hljs-selector-tag">yum</span> <span class="hljs-selector-tag">install</span> <span class="hljs-selector-tag">jenkins</span><br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 配置端口 </span><br>vi /etc/sysconfig/jenkins<br>JENKINS_PORT=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-comment">#这里是加入的</span><br>JAVA_CMD=<span class="hljs-string">&quot;<span class="hljs-subst">$JENKINS_JAVA_CMD</span> <span class="hljs-subst">$JENKINS_JAVA_OPTIONS</span> -DJENKINS_HOME=<span class="hljs-subst">$JENKINS_HOME</span> -jar <span class="hljs-subst">$JENKINS_WAR</span>&quot;</span><br></code></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 启动<span class="hljs-regexp">/停止/</span>重启/状态<br>service jenkins start<br>service jenkins stop<br>service jenkins restart<br>service jenkins status<br></code></pre></td></tr></table></figure><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">访问 http:<span class="hljs-regexp">//i</span>p:<span class="hljs-number">8080</span><br><span class="hljs-regexp">//</span> 查看密码<br>cat <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins/</span>secrets/initialAdminPassword<br><span class="hljs-regexp">//</span> 选择左边的默认安装<br><span class="hljs-regexp">//</span> 创建管理员用户<br></code></pre></td></tr></table></figure><h1 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 邮件通知<br>系统设置：<br>Jenkins Location &gt; 系统管理员邮件地址: 这里需要配置<br>邮件通知 &gt; <br>SMTP服务器:smtp.<span class="hljs-number">163</span>.com 或 smtp.qq.com <br>勾选 使用SMTP认证<br>用户名：邮箱名（这里需要与上面 系统管理员邮件地址 一致）<br>密码：这里填的是设置邮箱 开通 POP3/STMP 功能时设置的认证密码，不是邮箱密码！！！<br><br>测试：<br>勾选 通过发送测试邮件测试配置<br>Test e-mail recipient：接受的邮箱地址，测试的时候可以直接填 系统管理员邮件地址 地址，就是自己发给自己，发送给其他人时，因为内容中有 test 关键字，所以会报 <span class="hljs-number">554</span>  错误，意思是内容非法<br>错误代码说明：<br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/u013938484/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">51939587</span><br></code></pre></td></tr></table></figure><h1 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h1><blockquote><p>在这之前需要安装插件，gitLab/Maven Integration<br>参考链接：<a href="https://blog.csdn.net/alinyua/article/details/81103570">https://blog.csdn.net/alinyua/article/details/81103570</a></p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">1.构建一个自由风格的软件项目（适合多个项目代码融合在一起的项目，灵活度高）：<br>可以在《构建》选项中 选择 执行 <span class="hljs-keyword">shell</span>脚本，脚本里可以 写 maven 构建，然后docker发布，很灵活<br>2.构建一个maven项目（适合单个maven项目）：<br>在 《Build》选项中 配置好就可以了。这里配置完后，执行构建，就会把打包成 jar/war，在 《<span class="hljs-keyword">Post</span> Steps》中可以选择执行<span class="hljs-keyword">shell</span>，来启动项目<br><br>构建项目时没有 ·构建maven项目·：<br>参考链接：http:<span class="hljs-comment">//www.cnblogs.com/zhizhao/p/9442411.html</span><br>原因：没有安装插件，插件名：Maven Integration <span class="hljs-keyword">Plugin</span><br></code></pre></td></tr></table></figure><h1 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs crystal">错误一（启动时报错）：<br>错误信息：Starting Jenkins <span class="hljs-symbol">bash:</span> /usr/bin/<span class="hljs-symbol">java:</span> 没有那个文件或目录<br>解决办法：<br>查看Java_home：<br>[root@kk ~]<span class="hljs-comment"># echo $JAVA_HOME</span><br>/opt/jdk-<span class="hljs-number">8</span>u171-linux-x64/jdk1.<span class="hljs-number">8.0_191</span><br>修改配置文件：<br>vi /etc/rc.d/init.d/jenkins<br>candidates=<span class="hljs-string">&quot;</span><br><span class="hljs-string">/etc/alternatives/java</span><br><span class="hljs-string">/usr/lib/jvm/java-1.8.0/bin/java</span><br><span class="hljs-string">/usr/lib/jvm/jre-1.8.0/bin/java</span><br><span class="hljs-string">/usr/lib/jvm/java-1.7.0/bin/java</span><br><span class="hljs-string">/usr/lib/jvm/jre-1.7.0/bin/java</span><br><span class="hljs-string">/usr/bin/java</span><br><span class="hljs-string">/opt/jdk-8u171-linux-x64/jdk1.8.0_191/bin/java # 此处是加上的内容</span><br><span class="hljs-string">&quot;</span><br>错误二（源码配置时）：<br>错误信息：<span class="hljs-symbol">stderr:</span> <span class="hljs-symbol">error:</span> The requested URL returned <span class="hljs-symbol">error:</span> <span class="hljs-number">401</span> Unauthorized <span class="hljs-keyword">while</span> accessing <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/192.168.1.33:8000/csbr</span><span class="hljs-regexp">/blockchain.git/info</span><span class="hljs-regexp">/refs</span><br><span class="hljs-regexp">解决办法：url上加上用户名</span><br><span class="hljs-regexp">例如：http:/</span><span class="hljs-regexp">/username@192.168.1.33:8000/csbr</span><span class="hljs-regexp">/blockchain.git</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">错误三（执行 mvn install 进行项目构建时）</span><br><span class="hljs-regexp">错误信息：[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.0:compile (default-compile) on project csbr-boot-starter: Error while storing the mojo status: /var</span><span class="hljs-regexp">/lib/jenkins</span><span class="hljs-regexp">/workspace/test</span><span class="hljs-regexp">/csbr-boot-starter/target</span><span class="hljs-regexp">/maven-status/maven</span>-compiler-plugin/compile/default-compile/inputFiles.lst (权限不够)<br><br>解决办法：<br>vim /etc/sysconfig/jenkins<br>JENKINS_USER=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-comment"># 修改用户为root</span><br><br>错误四（设置密码后时候首次登录失败）<br><span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/blog.csdn.net/galen</span>2016/article/details/<span class="hljs-number">84648620</span><br>linux 中 config.xml 在 /var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">jenkins</span> 目录中，重新设置密码后记得把配置文件换回来，然后重启<span class="hljs-title">jenkins</span></span><br><br>错误五（构建shell中执行 nohup 启动失败）<br>问题的根本在于是Jenkins使用processTreeKiller杀掉了所有子进程，而且这是Jenkins的默认行为。为了解决该问题，我们需要在启动前加上这句<br>BUILD_ID=DONTKILLME<br>防止Jenkins 杀死我们的进程。<br>如下：<br>BUILD_ID=DONTKILLME<br>nohup java -jar test.jar &amp;<br></code></pre></td></tr></table></figure><h1 id="结合实际项目说明"><a href="#结合实际项目说明" class="headerlink" title="结合实际项目说明"></a>结合实际项目说明</h1><p>我们git上的项目是结合在一起的，不是每个服务对应git上的一个项目<br>git 目录<br><img src="https://img-blog.csdnimg.cn/20181218113027697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3phaWdlNjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>各个服务是在一个项目中，所以无法在构建项目时选择 构建一个 maven 项目，我选择的是 <strong>构建一个自由风格的软件项目</strong><br>那么问题来了：如何对每个项目进行打包，并发布呢<br>我是通过 <strong>在《构建》选项中 选择 执行 shell脚本</strong><br>具体shell内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>echo &quot;======================&quot;;<br>echo $PATH;<br>echo &quot;======================&quot;;<br><br><span class="hljs-meta">#</span><span class="bash"> 生成 start jar包</span><br>echo &quot;===========start install start=========&quot;<br>/opt/maven/apache-maven-3.5.3/bin/mvn -f /var/lib/jenkins/workspace/test/csbr-boot-starter install<br><br>echo &quot;===========core package start=========&quot;<br><span class="hljs-meta">#</span><span class="bash"> 打包 core</span><br>/opt/maven/apache-maven-3.5.3/bin/mvn -f /var/lib/jenkins/workspace/test/blockchain-core package<br><br><span class="hljs-meta">#</span><span class="bash"> 把 core 部署到docker</span><br>cp  /var/lib/jenkins/workspace/test/blockchain-core/target/blockchain-core-0.1.jar /opt/docker/projects/blockchain-core<br>echo &quot;===========docker start=========&quot;<br>bash /opt/docker/run start blockchain-core<br></code></pre></td></tr></table></figure><p>具体操作就是 自己调用 maven 命令进行打包，然后 调用自己编写的脚本，把打包好的 jar/war 部署到docker中</p><p><strong>执行 mvn 命令时会报错，提示 该 命令找不到，所以我用的是绝对路径</strong><br><strong>还会遇到错误三，解决办法看上面</strong></p><p>希望本文对您有所帮助！</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区块链环境搭建(composer/playground/explorer)</title>
    <link href="/2018/12/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <url>/2018/12/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="composer-搭建过程"><a href="#composer-搭建过程" class="headerlink" title="composer 搭建过程"></a>composer 搭建过程</h1><ol><li>​基本概念与第一个区块链应用 安装文档：<a href="https://www.ibm.com/developerworks/cn/cloud/library/cl-lo-hyperledger-fabric-study-notes1/index.html">https://www.ibm.com/developerworks/cn/cloud/library/cl-lo-hyperledger-fabric-study-notes1/index.html</a></li><li>​参考网址：<a href="https://blog.csdn.net/qq_27818541/article/details/78727076#%E4%B8%80-%E5%BC%80%E5%90%AFfabric%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C">https://blog.csdn.net/qq_27818541/article/details/78727076#%E4%B8%80-%E5%BC%80%E5%90%AFfabric%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C</a><h1 id="搭建过程中修改的地方"><a href="#搭建过程中修改的地方" class="headerlink" title="搭建过程中修改的地方"></a>搭建过程中修改的地方</h1><h2 id="修改一（执行-startFabric-sh-脚本时）"><a href="#修改一（执行-startFabric-sh-脚本时）" class="headerlink" title="修改一（执行 startFabric.sh 脚本时）"></a>修改一（执行 startFabric.sh 脚本时）</h2> 1.fabfir-tools/startFabric.sh 脚本执行时会调用 fabfir-tools/_loader.sh<br> 2.fabfir-tools/_loader.sh 脚本中 会有一段代码 export FABRIC_VERSION=”hlfv12”，把 hlfv12 修改成 hlfv11<br> 3.hlfv11 对应 fabfir-tools/fabric-scripts/hlfv11 这个文件夹</li></ol><p>修改的原因：hlfv12 版本与当前系统的 fabric 版本不相符，执行不了 hlfv12 文件夹中的脚本</p><h2 id="修改二（执行-createPeerAdminCard-sh-脚本时）"><a href="#修改二（执行-createPeerAdminCard-sh-脚本时）" class="headerlink" title="修改二（执行 createPeerAdminCard.sh 脚本时）"></a>修改二（执行 createPeerAdminCard.sh 脚本时）</h2><pre><code>1.调用 fabfir-tools/createPeerAdminCard.sh 最后执行的是 fabfir-tools/fabric-scripts/hlfv11/createPeerAdminCard.sh 脚本（前提是 执行了修改一）2.&quot;peers&quot;: &#123;    &quot;peer0.org1.example.com&quot;: &#123;        &quot;url&quot;: &quot;grpc://$&#123;HOST&#125;:7051&quot;,在这个节点下 加入 &quot;eventUrl&quot;: &quot;grpcs://$&#123;HOST&#125;:7053&quot;, 这个配置，不然执行脚本的时候会报错</code></pre><h2 id="修改三（执行-createPeerAdminCard-sh-脚本时）"><a href="#修改三（执行-createPeerAdminCard-sh-脚本时）" class="headerlink" title="修改三（执行 createPeerAdminCard.sh 脚本时）"></a>修改三（执行 createPeerAdminCard.sh 脚本时）</h2><pre><code>1.脚本中有一段逻辑是这样的：    &quot;$&#123;HL_COMPOSER_CLI&#125;&quot;  card import --file $&#123;CARDOUTPUT&#125;    意思是把 生成的card文件 导入到 composer 中，执行的时候会报错，错误信息如下：        Error: Failed to create client from connection profile. Error: PEM encoded certificate is required.    这个没有搜到到具体的答案，我尝试修改的是在该脚本        &quot;peers&quot;: &#123;        &quot;peer0.org1.example.com&quot;: &#123;            &quot;url&quot;: &quot;grpc://$&#123;HOST&#125;:7051&quot;,    这个节点下，加入内容：         &quot;tlsCACerts&quot;: &#123;                &quot;pem&quot;: &quot;-----BEGIN CERTIFICATE-----MIICGjCCAcCgAwIBAgIRANuOnVN+yd/BGyoX7ioEklQwCgYIKoZIzj0EAwIwczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMTcwNjI2MTI0OTI2WhcNMjcwNjI0MTI0OTI2WjBbMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEfMB0GA1UEAwwWQWRtaW5Ab3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGu8KxBQ1GkxSTMVoLv7NXiYKWj5t6DhWRTJBHnLkWV7lRUfYaKAKFadSii5M7Z7ZpwD8NS7IsMdPR6Z4EyGgwKjTTBLMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIBmrZau7BIB9rRLkwKmqpmSecIaOOr0CF6Mi2J5H4aauMAoGCCqGSM49BAMCA0gAMEUCIQC4sKQ6CEgqbTYe48az95W9/hnZ+7DI5eSnWUwV9vCd/gIgS5K6omNJydoFoEpaEIwM97uSXVMHPa0iyC497vdNURA=-----END CERTIFICATE-----&quot;            &#125;</code></pre><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pem 对应的值是 fabfir-tools<span class="hljs-regexp">/fabric-scripts/</span>hlfv11<span class="hljs-regexp">/composer/</span>crypto-config<span class="hljs-regexp">/peerOrganizations/</span>org1.example.com<span class="hljs-regexp">/users/</span>Admin@org1.example.com<span class="hljs-regexp">/msp/</span>signcerts/Admin@org1.example.com-cert.pem 该文件的内容，加入该内容后，执行正常<br></code></pre></td></tr></table></figure><h2 id="修改四（执行-yo-hyperledger-composer-businessnetwork-命令时）"><a href="#修改四（执行-yo-hyperledger-composer-businessnetwork-命令时）" class="headerlink" title="修改四（执行 yo hyperledger-composer:businessnetwork 命令时）"></a>修改四（执行 yo hyperledger-composer:businessnetwork 命令时）</h2><pre><code>错误信息：    [root@peer0 fabfir-tools]# yo hyperledger-composer:businessnetwork    Welcome to the business network generator    ? Business network name: tutorial-network    ? Description: kk    ? Author name:  kk    ? Author email: kk@qq.com    ? License: Apache-2.0    ? Namespace: org.example.biznet    events.js:183          throw er; // Unhandled &#39;error&#39; event          ^    Error: EACCES: permission denied, mkdir &#39;/opt/test/fabfir-tools/tutorial-network&#39;        at Object.fs.mkdirSync (fs.js:885:18)        at Function.sync (/usr/local/lib/node_modules/generator-hyperledger-composer/node_modules/mkdirp/index.js:71:13)        at child.Base.destinationRoot (/usr/local/lib/node_modules/generator-hyperledger-composer/node_modules/yeoman-generator/lib/base.js:701:14)</code></pre><p>解决办法：chmod 777 fabfir-tools</p><h1 id="启动命名"><a href="#启动命名" class="headerlink" title="启动命名"></a>启动命名</h1><h2 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript">第一次启动（照着上面的搭建流程）：<br>nohup composer-rest-server -c admin<span class="hljs-meta">@tutorial</span>-network -n <span class="hljs-built_in">never</span> -p <span class="hljs-number">82</span> &gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp; <br><br>停止后重新启动：<br>部署业务网络<br>composer network install --card PeerAdmin<span class="hljs-meta">@hlfv1</span> --archiveFile tutorial-network@<span class="hljs-number">0.0</span><span class="hljs-number">.1</span>.bna<br>启动业务网络<br>composer network start --networkName tutorial-network --networkVersion <span class="hljs-number">0.0</span><span class="hljs-number">.1</span> --networkAdmin admin --networkAdminEnrollSecret adminpw --card PeerAdmin<span class="hljs-meta">@hlfv1</span> --file networkadmin.card<br>启动服务<br>nohup composer-rest-server -c admin<span class="hljs-meta">@tutorial</span>-network -n <span class="hljs-built_in">never</span> -p <span class="hljs-number">82</span> &gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> fabfir-tools<br><span class="hljs-string">./stopFabric.sh</span><br></code></pre></td></tr></table></figure><h2 id="playgroud"><a href="#playgroud" class="headerlink" title="playgroud"></a>playgroud</h2><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><pre><code>nohup composer-playground -p 81 &gt;/dev/null 2&gt;&amp;1 &amp;</code></pre><h3 id="停止-1"><a href="#停止-1" class="headerlink" title="停止"></a>停止</h3><pre><code>[root@peer0 fabfir-tools]# netstat -tunpl | grep 82tcp6       0      0 :::82                   :::*                    LISTEN      14878/node[root@peer0 fabfir-tools]# kill 14878</code></pre><h2 id="explorer"><a href="#explorer" class="headerlink" title="explorer"></a>explorer</h2><h3 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/opt/</span>test/blockchain-explorer<br>./start.sh<br><br>启动端口的设置在 <span class="hljs-regexp">/opt/</span>test<span class="hljs-regexp">/blockchain-explorer/</span>config.json  <span class="hljs-string">&quot;prot&quot;</span>:<span class="hljs-number">83</span><br></code></pre></td></tr></table></figure><h3 id="停止-2"><a href="#停止-2" class="headerlink" title="停止"></a>停止</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[root<span class="hljs-variable">@peer0</span> fabfir-tools]<span class="hljs-comment"># netstat -tunpl | grep 83</span><br>tcp6       0      0 ::<span class="hljs-symbol">:</span><span class="hljs-number">82</span>                   ::<span class="hljs-symbol">:*</span>                    LISTEN      <span class="hljs-number">14878</span>/node<br>[root<span class="hljs-variable">@peer0</span> fabfir-tools]<span class="hljs-comment"># kill 14878</span><br></code></pre></td></tr></table></figure><h1 id="fabric-操作"><a href="#fabric-操作" class="headerlink" title="fabric 操作"></a>fabric 操作</h1><h2 id="查看-部署成功的网络"><a href="#查看-部署成功的网络" class="headerlink" title="查看 部署成功的网络"></a>查看 部署成功的网络</h2><pre><code>在服务已经起起来的前提下：    docker exec -it peer0.org1.example.com /bin/bash    ls /var/hyperledger/production/chaincodes/</code></pre><h2 id="查看部署的channel"><a href="#查看部署的channel" class="headerlink" title="查看部署的channel"></a>查看部署的channel</h2><pre><code>在服务已经起起来的前提下：    docker exec -it peer0.org1.example.com /bin/bash    peer channel list</code></pre><h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><p>在playgroud中升级业务网络时</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>Error trying to upgrade business network. Error: No valid responses from any peers. Response from attempted peer comms was an error: Error: 8 RESOURCE_EXHAUSTED: received trailing metadata size exceeds limit<br><br>硬盘内存不足<br></code></pre></td></tr></table></figure><p>在启动 explorer 时</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Handshake failed <span class="hljs-keyword">with</span> fatal <span class="hljs-keyword">error</span> SSL_ERROR_SSL: <span class="hljs-keyword">error</span>:<span class="hljs-number">1408</span>F10B:SSL routines <span class="hljs-built_in">version</span> <span class="hljs-built_in">number</span><br><br>把 config.json 中的 grpcs 改成 grpc<br></code></pre></td></tr></table></figure><p>通过composer写入区块信息，再通过explorer获取写入的信息时</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">正常返回值：<br>&#123;&quot;status&quot;:<span class="hljs-number">200</span>,&quot;rows&quot;:[&#123;&quot;id&quot;:<span class="hljs-number">40</span>,&quot;blocknum&quot;:<span class="hljs-number">9</span>,&quot;datahash&quot;:&quot;3f1b67d9050a3e86cc5367d4eccbee92bf7b4e9f3c98d8ac8e4debcedbc767d0&quot;,&quot;prehash&quot;:&quot;c4c3384877cffae8fa92fd798bca268c08be42e0c7ec3eb51e6cc3e1bba57aa8&quot;,&quot;channelname&quot;:&quot;composerchannel&quot;,&quot;txcount&quot;:<span class="hljs-number">1</span>,&quot;createdt&quot;:&quot;2018-12-12T02:12:21.000Z&quot;,&quot;prev_blockhash&quot;:<span class="hljs-keyword">null</span>,&quot;blockhash&quot;:<span class="hljs-keyword">null</span>,&quot;txhash&quot;:[&quot;cd656e737c1a76382f888f750318141eb466b1b4b79d1ce3365b3fd9bc82949d&quot;]&#125;]&#125;<br>返回的txhash数组里只有一个值<br><br>遇到的错误返回值：<br>&#123;&quot;status&quot;:<span class="hljs-number">200</span>,&quot;rows&quot;:[&#123;&quot;id&quot;:<span class="hljs-number">40</span>,&quot;blocknum&quot;:<span class="hljs-number">9</span>,&quot;datahash&quot;:&quot;3f1b67d9050a3e86cc5367d4eccbee92bf7b4e9f3c98d8ac8e4debcedbc767d0&quot;,&quot;prehash&quot;:&quot;c4c3384877cffae8fa92fd798bca268c08be42e0c7ec3eb51e6cc3e1bba57aa8&quot;,&quot;channelname&quot;:&quot;composerchannel&quot;,&quot;txcount&quot;:<span class="hljs-number">1</span>,&quot;createdt&quot;:&quot;2018-12-12T02:12:21.000Z&quot;,&quot;prev_blockhash&quot;:<span class="hljs-keyword">null</span>,&quot;blockhash&quot;:<span class="hljs-keyword">null</span>,&quot;txhash&quot;:[&quot;cd656e737c1a76382f888f750318141eb466b1b4b79d1ce3365b3fd9bc82949d&quot;,&quot;79d304b942e629151433dca8d32b6871882f55e398669eb9d0f89630bb970c85&quot;]&#125;]&#125;<br>返回的txhash数组里有多个值<br><br>原因：<br>以前添加了一个mychannel通道，现在又新加入了一个composerchannel通道，在查询 postgre 数据库的 <span class="hljs-keyword">transaction</span> 表（里面存放的txhash值）时，没有加入（channelname）条件判断，导致把以前mychannel中的数据也插叙出来了<br><br>解决过程：<br><span class="hljs-number">1.</span>查询explorer区块信息时，访问的接口是/api/blockAndTxList/channelName/blocknum<br><span class="hljs-number">2.</span>进入到blockchain-explorer项目，查看 main.js（这里写的接口逻辑） 文件，查找上面接口的处理逻辑<br><span class="hljs-number">3.</span>查询到处理逻辑是调用 blockchain-explorer/app/models/block.js 的 getBlockAndTxList方法<br><span class="hljs-number">4.</span>该方法中 到 postgre 数据库中执行 查询的<span class="hljs-keyword">sql</span>语句<br>原语句：<br> <span class="hljs-keyword">select</span> blocks.*,(<br>    <span class="hljs-keyword">SELECT</span>  array_agg(txhash) <span class="hljs-keyword">as</span> txhash <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">where</span> blockid = blocks.blocknum<br>  <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">transaction</span>.blockid )  <span class="hljs-keyword">from</span> blocks <span class="hljs-keyword">where</span><br>     blocks.channelname =<span class="hljs-string">&#x27;$&#123;channelName&#125;&#x27;</span> <span class="hljs-keyword">and</span> blocknum &gt;= $&#123;blockNum&#125;<br>     <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> blocks.blocknum <span class="hljs-keyword">desc</span>`;<br>     改变后的语句：<br>      <span class="hljs-keyword">select</span> blocks.*,(<br>    <span class="hljs-keyword">SELECT</span>  array_agg(txhash) <span class="hljs-keyword">as</span> txhash <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">where</span> blockid = blocks.blocknum<br> <span class="hljs-keyword">and</span> channelname=<span class="hljs-string">&#x27;$&#123;channelName&#125;&#x27;</span>    <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">transaction</span>.blockid )  <span class="hljs-keyword">from</span> blocks <span class="hljs-keyword">where</span><br>     blocks.channelname =<span class="hljs-string">&#x27;$&#123;channelName&#125;&#x27;</span> <span class="hljs-keyword">and</span> blocknum &gt;= $&#123;blockNum&#125;<br>     <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> blocks.blocknum <span class="hljs-keyword">desc</span>`;<br>     改变的位置：在查询 <span class="hljs-keyword">transaction</span> 表时加上channelName的条件判断<br> 总结：<br> 遇到无法理解和不好百度搜索的问题时，根据程序逻辑一步步走，然后大胆猜测<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>composer</tag>
      
      <tag>playground</tag>
      
      <tag>explorer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELK搭建流程 从0到1 包含过程中遇到的问题</title>
    <link href="/2018/11/15/elk/"/>
    <url>/2018/11/15/elk/</url>
    
    <content type="html"><![CDATA[<p>@[toc]<br>闲言碎语不要讲，开始！</p><h1 id="ELK环境搭建"><a href="#ELK环境搭建" class="headerlink" title="ELK环境搭建"></a>ELK环境搭建</h1><blockquote><p>参考链接：<a href="https://blog.csdn.net/liuge36/article/details/79768152">https://blog.csdn.net/liuge36/article/details/79768152</a></p></blockquote><h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><ol><li><p>JDK1.8以上</p></li><li><p>elasticsearch 启动时不能以 root 用户启动</p><h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><h2 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h2><h3 id="1-启动后外网访问不了"><a href="#1-启动后外网访问不了" class="headerlink" title="1.启动后外网访问不了"></a>1.启动后外网访问不了</h3><blockquote><p>参考地址：<a href="https://blog.csdn.net/buzaiQQ/article/details/67637731">https://blog.csdn.net/buzaiQQ/article/details/67637731</a></p></blockquote></li><li><p>防火墙是否关闭</p></li><li><p>是否开启了代理ip（我就是为了 谷歌搜索 然后开启了 代理ip，通过 内网ip始终访问不到 elasticsearch，一度怀疑人生）</p></li><li><p>在 elasticsearch.yml 文件中添加如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"> <span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><br><span class="hljs-attr">bootstrap.system_call_filter:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-max-number-of-threads-1024-for-user-xxx-is-too-low-increase-to-at-least-4096"><a href="#2-max-number-of-threads-1024-for-user-xxx-is-too-low-increase-to-at-least-4096" class="headerlink" title="2.max number of threads [1024] for user [xxx] is too low, increase to at least [4096"></a>2.max number of threads [1024] for user [xxx] is too low, increase to at least [4096</h3><blockquote><p>意思是当前用户线程数过低<br>参考链接：<a href="https://elasticsearch.cn/question/3915%EF%BC%88%E9%87%8D%E5%90%AF%E5%90%8E%E7%94%9F%E6%95%88%EF%BC%89">https://elasticsearch.cn/question/3915（重启后生效）</a></p></blockquote><h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h2><h3 id="1-汉化"><a href="#1-汉化" class="headerlink" title="1.汉化"></a>1.汉化</h3><blockquote><p>参考链接：<a href="https://github.com/anbai-inc/Kibana_Hanization">https://github.com/anbai-inc/Kibana_Hanization</a></p></blockquote><h3 id="2-visualize-可视化-条件筛选时没有自己想要的项"><a href="#2-visualize-可视化-条件筛选时没有自己想要的项" class="headerlink" title="2.visualize(可视化)条件筛选时没有自己想要的项"></a>2.visualize(可视化)条件筛选时没有自己想要的项</h3><p>主要是因为我在 elasticsearch 中建立数据类型(type)时如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"> &#123;<br>  <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;time&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,<br>      <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;ip&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    &#125;,<br>    <span class="hljs-attr">&quot;request&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    &#125;,<br>    <span class="hljs-attr">&quot;param&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后来修成成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"> &#123;<br>  <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;time&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,<br>      <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;ip&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>      <span class="hljs-attr">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;request&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>      <span class="hljs-attr">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;param&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>猜测原因是因为 text 不会没有建立索引规则，keyword会生成索引规则</p><h3 id="3-discover-发现-中查询不到数据"><a href="#3-discover-发现-中查询不到数据" class="headerlink" title="3.discover(发现) 中查询不到数据"></a>3.discover(发现) 中查询不到数据</h3><p><img src="https://img-blog.csdnimg.cn/20181115152602767.png" alt="在这里插入图片描述"><br>这里有个时间范围，我刚开始没找到是这个原因，一直查询不到数据，可急死我了。</p><h3 id="4-记录的时间与elasticsearch中相差8小时"><a href="#4-记录的时间与elasticsearch中相差8小时" class="headerlink" title="4.记录的时间与elasticsearch中相差8小时"></a>4.记录的时间与elasticsearch中相差8小时</h3><blockquote><p><a href="https://blog.csdn.net/weixin_42207486/article/details/82694495">https://blog.csdn.net/weixin_42207486/article/details/82694495</a></p></blockquote><h2 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h2><blockquote><p>这个组件问题最多，花了我最多的时间，一度想替换成其他日志采集的工具，但是好像只有这货 能很好的把日志解析成与 elasticsearch 中定义的字段 相对应</p></blockquote><h3 id="1-启动很慢慢慢！！！"><a href="#1-启动很慢慢慢！！！" class="headerlink" title="1.启动很慢慢慢！！！"></a>1.启动很慢慢慢！！！</h3><blockquote><p>不吐不快！ 我等他启动了快5分钟，然后报错说配置文件有问题，启动失败，当时真是…</p></blockquote><p>去百度，基本都是说 熵值低了，要安装 haveged<br>地址：<a href="https://www.jianshu.com/p/8ffc521fc3ed">https://www.jianshu.com/p/8ffc521fc3ed</a><br>但是在我这里没一点用。</p><p>后来 谷歌搜索半天，找到一个配置更新热加载的说明<br>地址：<a href="https://segmentfault.com/a/1190000015715238">https://segmentfault.com/a/1190000015715238</a><br>bin/logstash -f test.conf -r<br>这个还比较靠谱，我修改的基本也就是配置文件，通过这个热加载配置文件，基本只需要启动一次就好了</p><h3 id="2-grok-的编写"><a href="#2-grok-的编写" class="headerlink" title="2.grok 的编写"></a>2.grok 的编写</h3><blockquote><p>参考链接：<a href="https://www.jianshu.com/p/d46b911fb83e">https://www.jianshu.com/p/d46b911fb83e</a><br>grokdebugger：<a href="http://grokdebug.herokuapp.com/">http://grokdebug.herokuapp.com/</a></p></blockquote><p>大概样子</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">grok</span> <span class="hljs-string">&#123;</span><br>   <span class="hljs-attr">patterns_dir</span> =<span class="hljs-string">&gt; [&quot;/opt/elk/logstash-6.4.3/patterns&quot;]</span><br>   <span class="hljs-attr">match</span> =<span class="hljs-string">&gt; &#123;&quot;message&quot; =&gt; &quot;%&#123;DATA:time&#125;\|%&#123;DATA:ip&#125;\|%&#123;DATA:request&#125;\|%&#123;JSON_PARAM:param&#125;&quot;&#125;</span><br> <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><p>这里就再说说我遇到的坑吧…<br>我的日志格式是这样的 <strong>时间|ip|访问路径|访问参数</strong><br>最开始的 match 配置为 match =&gt; {“message” =&gt; “%{DATA:time}\|%{DATA:ip}\|%{DATA:request}\|%{DATA:param}”}<br>结果就是 最后匹配的 param(访问参数) 一直匹配不上<br>这里真是卡了好久，去百度都不知道怎搜… 在我坚持不懈的 百度+谷歌 下，终于知道原因是：DATA 模板匹配方式是 （.*?） 这个正则表达式就是匹配不上，后来我就改了下匹配方式，改成 （.*）就可以匹配上了.<br>这里就又涉及到另一个点：<strong>如何自定义模板</strong></p><h3 id="3-自定义模板"><a href="#3-自定义模板" class="headerlink" title="3.自定义模板"></a>3.自定义模板</h3><blockquote><p>找不到相应的参考链接了，大家去官网看吧</p></blockquote></li></ol><p>新建模板文件</p><p><img src="https://img-blog.csdnimg.cn/20181115160130341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3phaWdlNjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在logstash安装目录中新建文件夹 <strong>patterns</strong>(随意起名)，在 patterns 中新建文件<strong>JOSN_PATTERN</strong>(随意名)，文件里面编写自定义的模式 *<em>JSON_PARAM (.</em>)** 注意：名称与 表达式中间有个空格<br>调用方式：</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">grok</span> &#123;<br>   <span class="hljs-attr">patterns_dir</span> =&gt; [<span class="hljs-string">&quot;/opt/elk/logstash-6.4.3/patterns&quot;</span>]<br>   <span class="hljs-attr">match</span> =&gt; &#123;<span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;DATA:time&#125;\|%&#123;DATA:ip&#125;\|%&#123;DATA:request&#125;\|%&#123;JSON_PARAM:param&#125;&quot;</span>&#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-监控多个文件并发送到elasticsearch的多个索引中"><a href="#3-监控多个文件并发送到elasticsearch的多个索引中" class="headerlink" title="3.监控多个文件并发送到elasticsearch的多个索引中"></a>3.监控多个文件并发送到elasticsearch的多个索引中</h3><blockquote><p>这个容易搜到结果，关键点就是给file中定义一个type属性，其他位置对type 做判断，我直接贴配置文件</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs json">input &#123;<br>       beats&#123;<br>       port =&gt; 5044<br>       &#125;<br>       file&#123;<br>       type =&gt; &quot;access&quot;<br>       path =&gt; [&quot;/opt/test/access.log&quot;]<br>       &#125;<br>       file&#123;<br>       type =&gt; &quot;execute&quot;<br>       path =&gt; [&quot;/opt/test/execute.log&quot;]<br>       &#125;<br><br>&#125;<br>filter &#123;<br>if [type] == &quot;access&quot;&#123;<br> grok &#123;<br>    patterns_dir =&gt; [&quot;/opt/elk/logstash-6.4.3/patterns&quot;]<br>    match =&gt; &#123;&quot;message&quot; =&gt; &quot;%&#123;DATA:time&#125;\|%&#123;DATA:ip&#125;\|%&#123;DATA:request&#125;\|%&#123;JSON_PARAM:param&#125;&quot;&#125;<br>  &#125;<br> &#125;<br>  else if [type] == &quot;execute&quot;&#123;<br>    grok &#123;<br>      patterns_dir =&gt; [&quot;/opt/elk/logstash-6.4.3/patterns&quot;]<br>      match =&gt; &#123;&quot;message&quot; =&gt; &quot;%&#123;DATA:time&#125;\|%&#123;DATA:method&#125;\|%&#123;NUMBER:executeTime&#125;\|%&#123;DATA:projectName&#125;\|%&#123;NUMBER:port&#125;&quot;&#125;<br>    &#125;<br> &#125;<br><br>&#125;<br>output &#123;<br> if [type] == &quot;access&quot;&#123;<br> elasticsearch&#123;<br>     hosts =&gt; [&quot;192.168.33.33:9200&quot;]<br>     index =&gt; &quot;access&quot;<br>     document_type =&gt; &quot;access&quot;<br>     &#125;<br> &#125;<br>  else if [type] == &quot;execute&quot;&#123;<br> elasticsearch&#123;<br>     hosts =&gt; [&quot;192.168.33.33:9200&quot;]<br>     index =&gt; &quot;execute&quot;<br>     document_type =&gt; &quot;execute&quot;<br>     &#125;<br> &#125;<br>     stdout&#123;<br>              codec=&gt;rubydebug<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="elasticsearch-api操作"><a href="#elasticsearch-api操作" class="headerlink" title="elasticsearch api操作"></a>elasticsearch api操作</h1><blockquote><p>这个容易搜索，我做个记录</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs txt">添加表字段<br>PUT my_index/_mapping/my_type<br>// access<br>&#123;<br>  &quot;properties&quot;: &#123;<br>    &quot;time&quot;: &#123;<br>      &quot;type&quot;: &quot;date&quot;,<br>      &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;<br>    &#125;,<br>    &quot;ip&quot;: &#123;<br>      &quot;type&quot;: &quot;keyword&quot;,<br>      &quot;ignore_above&quot;: 256<br>    &#125;,<br>    &quot;request&quot;: &#123;<br>      &quot;type&quot;: &quot;keyword&quot;,<br>      &quot;ignore_above&quot;: 256<br>    &#125;,<br>    &quot;param&quot;: &#123;<br>      &quot;type&quot;: &quot;keyword&quot;<br>    &#125;<br>  &#125;<br>&#125;<br>// execute<br>&#123;<br>  &quot;properties&quot;: &#123;<br>    &quot;time&quot;: &#123;<br>      &quot;type&quot;: &quot;date&quot;,<br>      &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;<br>    &#125;,<br>    &quot;method&quot;: &#123;<br>      &quot;type&quot;: &quot;keyword&quot;,<br>      &quot;ignore_above&quot;: 256<br>    &#125;,<br>    &quot;executeTime&quot;: &#123;<br>      &quot;type&quot;: &quot;integer&quot;<br>    &#125;,<br>    &quot;projectName&quot;: &#123;<br>      &quot;type&quot;: &quot;keyword&quot;,<br>      &quot;ignore_above&quot;: 256<br>    &#125;,<br>    &quot;port&quot;: &#123;<br>      &quot;type&quot;: &quot;integer&quot;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br>添加记录--指定id<br><br>$ curl -X PUT &#x27;localhost:9200/index/type/id&#x27; -d &#x27;<br>&#123;<br>  &quot;user&quot;: &quot;张三&quot;,<br>  &quot;title&quot;: &quot;工程师&quot;,<br>  &quot;desc&quot;: &quot;数据库管理&quot;<br>&#125;&#x27; <br><br>添加记录--不指定id<br><br>$ curl -X POST &#x27;localhost:9200/index/type&#x27; -d &#x27;<br>&#123;<br>  &quot;user&quot;: &quot;李四&quot;,<br>  &quot;title&quot;: &quot;工程师&quot;,<br>  &quot;desc&quot;: &quot;系统管理&quot;<br>&#125;&#x27;<br><br>根据id查询<br>向/Index/Type/Id发出 GET 请求，就可以查看这条记录<br><br>使用 GET 方法，直接请求/Index/Type/_search，就会返回所有记录。<br><br>删除记录<br>/Index/Type/Id发出 delete 请求，就可以删除这条记录<br><br>更新记录就是使用 PUT 请求，重新发送一次数据。<br></code></pre></td></tr></table></figure><h1 id="写点什么"><a href="#写点什么" class="headerlink" title="写点什么"></a>写点什么</h1><p>通过这个搭建，终于体会到百度与谷歌的区别，百度真是个**，还是谷歌靠谱。<br>整个搭建过程花了两天多时间，痛苦…<br>希望这篇文章能让大家更容易的搭建起来。加油！</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>elk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ELK</tag>
      
      <tag>kibana</tag>
      
      <tag>logstash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring this调用方法事务失效分析</title>
    <link href="/2018/08/14/spring%20this%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E5%88%86%E6%9E%90/"/>
    <url>/2018/08/14/spring%20this%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>问题</p><p>       a方法，b方法，都通过aop加上了事物控制，a中调用了b方法，那么一共几次事物</p><p>准备</p><p>      1.创建数据库</p><p>– 创建数据库<br>use test;<br>– 建表<br>create table account(<br>  id int not null auto_increment,<br>  name varchar(20) not null ,<br>  money double not null<br>);<br>INSERT into account(id,name,money) VALUE<br>  (1,”aaa”,1000),<br>  (1,”bbb”,1000),<br>  (1,”ccc”,1000)</p><p>      2.xml配置，实例化了两个 service 类，一个dao类，开启事务注解驱动</p><!--spring事务管理器--><pre><code>&lt;bean name=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;&lt;!--配置业务层--&gt;&lt;bean id=&quot;accountDaoImpl&quot; class=&quot;com.test.demo4.AccountDaoImpl&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;accountServiceImpl&quot; class=&quot;com.test.demo4.AccountServiceImpl&quot;&gt;&lt;/bean&gt;&lt;bean id=&quot;accountServiceImpl2&quot; class=&quot;com.test.demo4.AccountServiceImpl2&quot;&gt;&lt;/bean&gt;</code></pre><p>      3.dao 类</p><p>public class AccountDaoImpl extends JdbcDaoSupport implements AccountDao {</p><pre><code>@Overridepublic void add(String name, double money) &#123;    String sql = &quot;update `account` set money = money + &quot;+money+&quot; where `name` = &#39;&quot;+name+&quot;&#39;&quot;;    getJdbcTemplate().execute(sql);&#125;@Overridepublic void reduce(String name, double money) &#123;    String sql = &quot;update `account` set money = money - &quot;+money+&quot; where `name` =  &#39;&quot;+name+&quot;&#39;&quot;;    getJdbcTemplate().execute(sql);&#125;</code></pre><p>}<br>     4.service 类</p><p>// service 1<br>public class AccountServiceImpl  implements AccountService {<br>    @Autowired<br>    private AccountDao accountDao;<br>    @Autowired<br>    private AccountServiceImpl2 accountServiceImpl2;</p><pre><code>@Overridepublic void transfer(String from, String to, double money) &#123;    add(to,money);    try &#123;        //accountServiceImpl2.reduce(from,money);        reduce(from,money);    &#125;catch (Exception e)&#123;        System.out.println(&quot;1111111&quot;);    &#125;&#125;public void  add(String to, double money)&#123;    accountDao.add(to,money);&#125;public void  reduce(String to, double money)&#123;   int i = 1/0;    accountDao.reduce(to,money);&#125;</code></pre><p>}</p><p>// service 2<br>public class AccountServiceImpl2  {<br>    @Autowired<br>    private AccountDao accountDao;</p><p>   @Transactional(propagation = Propagation.REQUIRED, readOnly = false)<br>    public void  reduce(String to, double money){<br>       int i = 1/0;<br>        accountDao.reduce(to,money);<br>    }<br>}<br>    5.测试类</p><p>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration(“classpath:applicationContext4.xml”)<br>public class TestService {<br>    @Autowired<br>    private AccountService accountService;</p><pre><code>@Testpublic void test()&#123;    accountService.transfer(&quot;aaa&quot;,&quot;bbb&quot;,200);&#125;</code></pre><p>}<br>测试</p><p>      1.当 a , b 方法在同一个类中时，两个方法的 事务传播行为都设置为 Propagation.REQUIRED</p><p>          即 AccountServiceImpl 中transfer 的内容为</p><p>@Transactional(propagation = Propagation.REQUIRED, readOnly = false)<br>    @Override<br>    public void transfer(String from, String to, double money) {<br>        add(to,money);<br>        try {<br>            //accountServiceImpl2.reduce(from,money);<br>            reduce(from,money);<br>        }catch (Exception e){<br>            System.out.println(“1111111”);<br>        }</p><pre><code>&#125;</code></pre><p>         AccountServiceImpl 中reduce 的内容为</p><p>@Transactional(propagation = Propagation.REQUIRED, readOnly = false)<br> public void  reduce(String to, double money){<br>    int i = 1/0;<br>     accountDao.reduce(to,money);<br> }</p><p>测试结果：</p><p>当设置 AccountServiceImpl 中transfer 的传播行为是 Propagation.REQUIRED，AccountServiceImpl 中reduce 的传播行为是 REQUIRES_NEW 时，</p><p>测试结果：</p><p>2.当 a , b 方法不在同一个类中时，两个方法的 事务传播行为都设置为 Propagation.REQUIRED</p><p>即 AccountServiceImpl 中transfer 的内容为</p><p>@Transactional(propagation = Propagation.REQUIRED, readOnly = false)<br>    @Override<br>    public void transfer(String from, String to, double money) {<br>        add(to,money);<br>        try {<br>            accountServiceImpl2.reduce(from,money);<br>            //reduce(from,money);<br>        }catch (Exception e){<br>            System.out.println(“1111111”);<br>        }</p><pre><code>&#125;</code></pre><p>AccountServiceImpl2 中reduce 的内容为</p><p>@Transactional(propagation = Propagation.REQUIRED, readOnly = false)<br> public void  reduce(String to, double money){<br>    int i = 1/0;<br>     accountDao.reduce(to,money);<br> }</p><p>测试结果：，控制台抛出异常  org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</p><p>当设置 AccountServiceImpl 中transfer 的传播行为是 Propagation.REQUIRED，AccountServiceImpl2 中reduce 的传播行为是 Propagation.REQUIRES_NEW 时，</p><p>测试结果：，控制台正常</p><p>总结：</p><p>        1.当a,b方法在同一个类中时，不管 b 方法设置何种 传播行为，a,b方法都共用一个事务（具体实现方式还未深究）。</p><p>        2.当a,b方法不在同一个类中时，事务的传播行为看 b 方法的注解配置，b 方法配置 Propagation.REQUIRED 是，与a方法共用事务，</p><p>当 b 中产生异常，b 方法把 事务 标记 为回滚，然后把异常抛给 a 方法，a 方法对异常进行了捕获，所以 a 方法内无异常，a方法会 对事务 进行提交操作，但是b 方法已经把 该事务 标记为 回滚，所以 会抛出异常。解决这个的办法就是把 b 方法配置为 Propagation.REQUIRES_NEW，这样 b 方法会产生新的 事务，结果就是 b 的事务回滚，a 的事务正常提交</p><p>如有说的不对地方，欢迎大家拍砖！</p><hr><p>上面总结中的第一点，经过一番百度，有一篇比较深入的讲解博客，附上连接：<a href="https://blog.csdn.net/jiesa/article/details/53438342%E3%80%82">https://blog.csdn.net/jiesa/article/details/53438342。</a></p><p>但是对于该博客的分析中，我还是有点疑问 ：</p><p>博文中说 当调用本类方法时，此时的 this 是指向被代理的对象的</p><p>测试确实如此，那为什么不是 指向 spring 生成的代理类呢？</p><p>希望知道的朋友能知导一二，谢谢！</p><hr><p>又找到了两个说的很透彻的链接了！</p><p><a href="http://www.importnew.com/28793.html">http://www.importnew.com/28793.html</a></p><p><a href="https://my.oschina.net/guangshan/blog/1797461">https://my.oschina.net/guangshan/blog/1797461</a></p><p>JDK 动态代理</p><p>JdkDynamicAopProxy 类的invoke方法<br>Cglib动态代理</p><p>CglibAopProxy 类中设置了callback   为 DynamicAdvisedInterceptor 类</p><p>我们配置的 aop 切面，实际是以责任链的方式执行的，然后调用的<em>被代理的对象</em>执行响应的方法，所以在方法中断点查看this对象，发现不是代理对象，就是当前的类。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>java</tag>
      
      <tag>aop</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>关于</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>一只在路上的🐎🐲</p>]]></content>
    
  </entry>
  
  
  
</search>
